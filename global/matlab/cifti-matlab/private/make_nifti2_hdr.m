function hdr = make_nifti2_hdr()
    hdr = struct();
    hdr.sizeof_hdr = int32(540);
    hdr.magic = ['n+2' 0 13 10 26 10]; %should write reset this anyway?
    hdr.datatype = int16(16); %default to float32
    hdr.bitpix = int16(32);
    hdr.dim = ones(1, 8, 'int64');
    hdr.intent_p1 = 0.0;
    hdr.intent_p2 = 0.0;
    hdr.intent_p3 = 0.0;
    hdr.pixdim = ones(1, 8);
    hdr.vox_offset = int64(-1); %intentionally invalid, will be set by write_nifti2_hdr()
    hdr.scl_slope = 1.0;
    hdr.scl_inter = 0.0;
    hdr.cal_max = 0.0;
    hdr.cal_min = 0.0;
    hdr.slice_duration = 0.0;
    hdr.toffset = 0.0;
    hdr.slice_start = int64(0);
    hdr.slice_end = int64(0);
    hdr.descrip = char(zeros(1, 80, 'int8')); %write_ will fix strings even if they are the wrong length
    hdr.aux_file = char(zeros(1, 24, 'int8'));
    hdr.qform_code = int32(0);
    hdr.sform_code = int32(0);
    hdr.quatern_b = 0.0;
    hdr.quatern_c = 0.0;
    hdr.quatern_d = 0.0;
    hdr.qoffset_x = 0.0;
    hdr.qoffset_y = 0.0;
    hdr.qoffset_z = 0.0;
    hdr.srow_x = zeros(1, 4);
    hdr.srow_y = zeros(1, 4);
    hdr.srow_z = zeros(1, 4);
    hdr.slice_code = int32(0);
    hdr.xyzt_units = int32(10); %default to mm + sec
    hdr.intent_code = int32(0);
    hdr.intent_name = char(zeros(1, 16, 'int8'));
    hdr.dim_info = char(0);
    hdr.unused_str = char(zeros(1, 15, 'int8'));
    hdr.extensions = struct('ecode', {}, 'edata', {}); %esize is automatically set from the length of edata
end

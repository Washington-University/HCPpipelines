#!/bin/echo This script should not be run directly:

#call 'tempfiles_add <file1> <file2> ...' to mark files to be deleted when the script exits (for any reason, including crash or interrupt)
function tempfiles_add()
{
    tempfiles_list+=("$@")
}

#call 'tempfiles_keep 1' to disable deletion
function tempfiles_keep()
{
    tempfiles_keepvar="$1"
}

#mac mktemp is much less useful, add a function to hack around it
#use like 'tempfiles_create strucQC_mask_XXXXXX.nii.gz mytempvar'
#for convenience, it automatically calls tempfiles_add on the file, though this has no effect inside $(), so warn for the old syntax
function tempfiles_create()
{
    if [[ "$OSTYPE" == darwin* ]]
    then
        #mac mktemp can't generate a file with a specified extension on it, placeholders must be the very last characters
        #we only need non-collision with well-meaning things, so ignore the security advice
        local pattend="${1##*XXX}"
        local beginchars=$((${#1} - ${#pattend}))
        local pattbegin="${1:0:$beginchars}"
        if [[ "$pattbegin" == "" ]]
        then
            echo "tempfiles_create pattern '$1' needs more consecutive X's" 1>&2
            exit 1
        fi
        #-t doesn't even look at X's in the template
        #so, handle the /tmp, $TMPDIR stuff manually
        local retbase="$(mktemp "${TMPDIR:-/tmp}/$pattbegin")"
        #don't immediately delete the mktemp result, for better non-collision
        tempfiles_add "$retbase"
        if (($# <= 1))
        then
            echo "developer warning: subshell use of tempfiles_create on mac leaves empty files behind" 1>&2
        fi
        local ret="$retbase""$pattend"
        echo -n "" > "$ret"
    else
        if (($# <= 1))
        then
            echo "developer warning: possible subshell usage of tempfiles_create detected" 1>&2
        fi
        local ret="$(mktemp --tmpdir "$1")"
    fi
    tempfiles_add "$ret"
    if (($# > 1))
    then
        printf -v "$2" '%s' "$ret"
    else
        echo "$ret"
    fi
}

#implementation details
tempfiles_list=()
tempfiles_keep 0

function tempfiles_cleanup()
{
    if [[ "$tempfiles_keepvar" == "0" ]] && ((${#tempfiles_list[@]} > 0))
    then
        rm -f -- "${tempfiles_list[@]}" || true
        tempfiles_list=()
    fi
}

function tempfiles_par_shell_reset()
{
    tempfiles_list=()
    #ignore setting for keeping temp files?
    tempfiles_keep 0
}

trap tempfiles_cleanup EXIT


#!/bin/echo This script should not be run directly:

#call 'tempfiles_add <file1> <file2> ...' to mark files to be deleted when the script exits (for any reason, including crash or interrupt)
function tempfiles_add()
{
    for file in "$@"
    do
        #absolute paths go in as-is
        if [[ "$file" == /* ]]
        then
            tempfiles_list+=("$file")
        else
            #relative paths need to be converted in case the script does a cd
            #use an extra character to stop the "strip multiple trailing newlines" behavior
            filedirdot=$(cd "$(dirname "$file")"; pwd; echo -n .)
            #manually strip the 1 newline added by pwd and the extra char
            filedir=${filedirdot%$'\n'.}
            tempfiles_list+=("$filedir/$(basename "$file")")
        fi
    done
}

#call 'tempfiles_keep 1' to disable deletion
function tempfiles_keep()
{
    tempfiles_keepvar="$1"
}

#mac mktemp is much less useful, add a function to hack around it
#use like 'tempfiles_create strucQC_mask_XXXXXX.nii.gz mytempvar'
#for convenience, it automatically calls tempfiles_add on the file, though this has no effect inside $(), so warn for the old syntax
function tempfiles_create()
{
    if [[ "$OSTYPE" == darwin* ]]
    then
        #mac mktemp can't generate a file with a specified extension on it, placeholders must be the very last characters
        #we only need non-collision with well-meaning things, so ignore the security advice
        local pattend="${1##*XXX}"
        local beginchars=$((${#1} - ${#pattend}))
        local pattbegin="${1:0:$beginchars}"
        if [[ "$pattbegin" == "" ]]
        then
            log_Err_Abort "tempfiles_create pattern '$1' needs more consecutive X's"
        fi
        #-t doesn't even look at X's in the template
        #so, handle the /tmp, $TMPDIR stuff manually
        local retbase="$(mktemp "${TMPDIR:-/tmp}/$pattbegin")"
        #don't immediately delete the mktemp result, for better non-collision
        tempfiles_add "$retbase"
        local ret="$retbase""$pattend"
        echo -n "" > "$ret"
    else
        local ret="$(mktemp --tmpdir "$1")"
    fi
    tempfiles_add "$ret"
    if (($# > 1))
    then
        printf -v "$2" '%s' "$ret"
    else
        #error but don't abort
        echo "developer error: tempfiles_create called with less than two arguments, this will likely leave temporary files behind" 1>&2
        
        echo "$ret"
    fi
}

#makes a copy of a file in the temporary directory and adds it to tempfiles list
#arguments: filename varname
function tempfiles_copy()
{
    filebase=$(basename "$1")
    template=$(echo "$filebase" | cut -f1 -d.).tmpcopy_XXXXX.$(echo "$filebase" | cut -f2- -d.)
    tempfiles_create "$template" "$2"
    cp "$1" "${!2}"
}

#implementation details
tempfiles_list=()
tempfiles_keep 0

function tempfiles_cleanup()
{
    if ((${#tempfiles_list[@]} > 0))
    then
        if [[ "$tempfiles_keepvar" == "0" ]]
        then
            rm -f -- "${tempfiles_list[@]}" || true
        else
            echo "WARNING: due to tempfiles_keep, the following temporary files were not deleted: ${tempfiles_list[*]}" 1>&2
        fi
    fi
    #clear the current list regardless, for less surprising semantics
    tempfiles_list=()
}

#this is mainly for the purpose of parallel.shlib, as a backgrounded function doesn't affect global variables
#however, this would also be needed for functions that use tempfiles which are called in a subshell, which also don't affect global variables
function tempfiles_subshell_reset()
{
    tempfiles_list=()
    #ignore setting for keeping temp files?
    tempfiles_keep 0
}

trap tempfiles_cleanup EXIT


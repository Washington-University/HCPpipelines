#
# Description:
#   sets the name of the tool to use for future logging 
#
# Input:
#   The first parameter is the name of the tool
#
log_SetToolName() 
{
    log_toolName="$1"
}

#
# Description:
#   logs a time-stamped, tool-described message to standard output
#
# Input:
#   The parameters are the message to send to standard output
#
log_Msg() 
{
    local msg=$@
    local dateTime=`date`
    echo $dateTime "-" $log_toolName "-" $msg
}

#
# Description:
#   logs a time-stamped, tool-described error message to standard output 
#   and aborts the script
#
# Input:
#   The parameters are the message to send to the standard output
#
log_Error_Abort() 
{
	local msg=$@
	local dateTime=`date`
	echo $dateTime "-" $log_toolName "-" "ERROR:" $msg "--ABORTING--"
	exit 1
}

#
# Description:
#   Checks whether the specified file exists.
#   Logs whether or not the file exists.
#
# Input:
#   Full path to file to check
#
log_Does_File_Exist()
{
	local file_to_check=${1}
	if [ -e "${file_to_check}" ]; then
		log_Msg "File: ${file_to_check} EXISTS"
	else
		log_Msg "File: ${file_to_check} DOES NOT EXIST"
	fi
}

#
# Description:
#   Checks that the specified file actually exists.
#   If it does, then that fact is logged. 
#   If it doesn't, causes an abort of the processing.
#
# Input:
#   Full path to file that must exist
#
log_File_Must_Exist() 
{
	local file_that_must_exist=${1}
	if [ -e "${file_that_must_exist}" ]; then
		log_Msg "File: ${file_that_must_exist} EXISTS"
	else
		log_Error_Abort "File: ${file_that_must_exist} DOES NOT EXIST"
	fi
}

#
# Description:
#   Turn on debugging. Set a flag to indicate debugging messages 
#   should be logged
#
log_Debug_On()
{
	log_debugOn="true"
}

#
# Description:
#   Log a debugging message. If debugging is not turned on,
#   this function logs nothing
#
log_Debug_Msg()
{
	local msg=$@
	if [ ! -z "${log_debugOn}" ] ; then
		log_Msg "DEBUG: ${msg}"
	fi
}

#
# Description:
#   Cat out a specified file only if debugging mode is turned on
#
log_Debug_Cat()
{
	local file_to_cat=$@
	if [ ! -z "${log_debugOn}" ] ; then
		log_Msg "DEBUG: Begin contents of file: ${file_to_cat}"
		cat ${file_to_cat}
		log_Msg "DEBUG: End contents of file: ${file_to_cat}"
	fi
}

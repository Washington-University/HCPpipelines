#use 'source $HCPPIPEDIR/global/scripts/log.shlib "$@"' to log the full command line originally run on error or abort
if (($# > 0))
then
	log_FullCommand="$0 $*"
else
	log_FullCommand=""
fi

#
# Description:
#   sets the name of the tool to use for future logging
#
# Input:
#   The first parameter is the name of the tool
#
log_SetToolName()
{
	log_ToolName="$*"
}
#also set the default toolname on sourcing so that logging functions don't crash under set -eu
log_SetToolName "$(basename -- "$0")"

#
# Description:
#   Configure logging so that date and time are shown in log messages
#
log_SetShowDateTime()
{
	log_ShowDateTime="TRUE"
}
log_SetShowDateTime

#
# Description:
#   Configure logging so that date and time are not shown in log messages
#
log_ClearShowDateTime()
{
	log_ShowDateTime="FALSE"
}

#
# Description:
#   Configure logging so that the tool name (i.e. script name) is shown in log messages
#
log_SetShowToolName()
{
	log_ShowToolName="TRUE"
}
log_SetShowToolName

#
# Description:
#   Configure logging so that the tool name (i.e. script name) is not shown in log messages
#
log_ClearShowToolName()
{
	log_ShowToolName="FALSE"
}

#
# Description:
#   Configure logging so that the function name is shown in log messages
#
log_SetShowFunctionName()
{
	log_ShowFunctionName="TRUE"
}

#
# Description:
#   Configure logging so that the function name is NOT shown in log messages
#
log_ClearShowFunctionName()
{
	log_ShowFunctionName="FALSE"
}
log_ClearShowFunctionName

#
# Description:
#   logs a time-stamped, tool-described message to standard output
#
# Input:
#   The parameters are the message to send to standard output
#
log_Msg()
{
	# capture parameters specifying message to output
	local parameters="$*"

	# get current date and time
	local dateTime
	dateTime=$(date)

	# determine name of tool (script) being run
	local toolname
	if [ -z "${log_ToolName}" ]; then
		toolname=$(basename ${0})
	else
		toolname="${log_ToolName}"
	fi

	# determine name of function that called this log_Msg function
	local functionname
	functionname="${FUNCNAME[1]}"

	# build full text to output
	local msg=""

	# default is to show the date and time
	if [ -z "${log_ShowDateTime}" -o "${log_ShowDateTime}" == "TRUE" ]; then
		if [ -z "${msg}" ]; then
			msg+="${dateTime}"
		else
			msg+=":${dateTime}"
		fi
	fi

	# default is to show the tool name
	if [ -z "${log_ShowToolName}" -o "${log_ShowToolName}" == "TRUE" ]; then
		if [ -z "${msg}" ]; then
			msg+="${toolname}"
		else
			msg+=":${toolname}"
		fi
	fi

	# default is NOT to show the function name
	if [ "${log_ShowFunctionName}" == "TRUE" ]; then
		if [ -z "${msg}" ]; then
			msg+="${functionname}"
		else
			msg+=":${functionname}"
		fi
	fi

	# always add the message/parameters specified 
	if [ -z "${msg}" ]; then
		msg+="${parameters}"
	else
		msg+=": ${parameters}"
	fi
	
	echo "${msg}"
}

#
# Description:
#   logs a time-stamped, tool-described error message to standard output
#   and aborts the script
#
# Input:
#   The parameters are the message to send to the standard output
#
log_full_command_shown=0
log_Err_Abort()
{
	log_Err "$*"
	log_Msg "ABORTING"
	exit 1
}

log_Err()
{
	local msg="$*"
	if [[ ! -z "$log_FullCommand" ]] && ((! log_full_command_shown))
	then
		log_Msg "While running '$log_FullCommand':" 1>&2
		log_full_command_shown=1
	fi
	log_Msg "ERROR: ${msg}" 1>&2
	#-t checks for being a terminal - if stderr is redirected to a file, duplicate the error message on stdout
	if [[ ! -t 2 ]]
	then
		log_Msg "ERROR: ${msg}"
	fi
}

log_Warn()
{
	local msg="$*"
	log_Msg "WARNING: ${msg}"
}

#
# Description:
#   Checks whether the specified file exists.
#   Logs whether or not the file exists.
#
# Input:
#   Full path to file to check
#
log_Does_File_Exist()
{
	local file_to_check="${1}"
	if [ -e "${file_to_check}" ]; then
		log_Msg "File: ${file_to_check} EXISTS"
	else
		log_Msg "File: ${file_to_check} DOES NOT EXIST"
	fi
}

#
# Description:
#   Checks that the specified file actually exists.
#   If it does, then that fact is logged.
#   If it doesn't, causes an abort of the processing.
#
# Input:
#   Full path to file that must exist
#
log_File_Must_Exist()
{
	local file_that_must_exist="${1}"
	if [ -e "${file_that_must_exist}" ]; then
		log_Msg "File: ${file_that_must_exist} EXISTS"
	else
		log_Err_Abort "File: ${file_that_must_exist} DOES NOT EXIST"
	fi
}

#
# Description:
#   Turn on debugging. Set a flag to indicate debugging messages
#   should be logged - empty value means not on
#
log_debugOn=""
log_Debug_On()
{
	log_debugOn="true"
}

#
# Description:
#   Log a debugging message. If debugging is not turned on,
#   this function logs nothing
#
log_Debug_Msg()
{
	local msg="$*"
	if [ ! -z "${log_debugOn}" ] ; then
		log_Msg "DEBUG: ${msg}"
	fi
}

#
# Description:
#   Cat out a specified file only if debugging mode is turned on
#
log_Debug_Cat()
{
	local file_to_cat="$*"
	if [ ! -z "${log_debugOn}" ] ; then
		log_Msg "DEBUG: Begin contents of file: ${file_to_cat}"
		cat "${file_to_cat}"
		log_Msg "DEBUG: End contents of file: ${file_to_cat}"
	fi
}

#
# Description:
#   Check to see if the specified environment variable has a value
#   set (is not an empty string). Abort script if it is not set.
#   Log its value if it is set.
#
log_Check_Env_Var()
{
	local var_name="${1}"

	if [ -z "${!var_name}" ]; then
		log_Err_Abort "${var_name} environment variable must be set"
	fi
	log_Msg "${var_name}: ${!var_name}"
}

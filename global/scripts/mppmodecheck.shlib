# Functions for checking compliance with selected MPP mode for HCP Pipelines

# --- Import log.shlib 

if [[ "$(type -t log_Err_Abort)" != "function" ]]
then
    source "$HCPPIPEDIR/global/scripts/log.shlib" "$@"
fi


# --- Functions to check that a valid pipeline name was passed

check_pipeline_name()
{
    for valid_pipeline in PreFreeSurfer FreeSurfer PostFreeSurfer fMRIVolume fMRISurface Difussion
    do
        if [ "${valid_pipeline}" = "${pipeline}" ]; then
            ispipeline="true"
        fi
    done
}

# --- Functions for pipeline specific checks

check_mpp_PreFreeSurfer()
{
    # -- T2w image

    if [ "${T2wInputImages}" = "NONE" ]; then
      log_Msg "-> T2w image not present (extended)"
      Compliance="extended"
    else
      log_Msg "-> T2w image present (standard)"
    fi

    # -- Use of custom brain

    if [ ! "${CustomBrain}" = "NONE" ]; then
      log_Msg "-> Custom brain used: ${CustomBrain} (extended)"
      Compliance="extended"
    else
      log_Msg "-> No custom brain used (standard)"
    fi
}

check_mpp_FreeSurfer()
{
    # -- T2w image

    if [ -z "${p_t2w_image}" ]; then
        if [ -z "${p_existing_subject}" ]; then
            log_Msg "-> T2w Image (--t2w-image= or --t2=) not present (extended)"
            Compliance="extended"
        fi
        p_t2w_image="NONE"
    else
        log_Msg "T2w Image present: ${p_t2w_image} (standard)"
    fi
}


check_mpp_PostFreeSurfer()
{
    # -- T2w image

    if [ ! -e ${T2wFolder}/T2w.nii.gz ]; then
        log_Msg "-> T2w image not present (extended)"
        Compliance="extended"
        T2wRestoreImage="NONE"
    else
      log_Msg "-> T2w image present"
    fi
}


check_mpp_fMRIVolume()
{
    # -- Slice timing correction

    if [ ! "${DoSliceTimeCorrection}" == 'NONE' ]; then
      log_Msg "-> Set to run slice timing correction (extended)"
      Compliance="extended"
    else
      log_Msg "-> Not running slice timing correction (standard)"
    fi

    # -- Use of BOLD scout image

    if [ "${fMRIScout}" == 'NONE' ]; then
      log_Msg "-> Set to use average motion corrected image as scout image (extended)"
      Compliance="extended"
    else
      log_Msg "-> fMRIScout image is provided (standard)"
    fi

    # -- Use of BOLD reference

    if [ ! "${fMRIReference}" == 'NONE' ]; then
      log_Msg "-> Set to use ${fMRIReference} as BOLD reference (extended)"
      Compliance="extended"
    else
      log_Msg "-> Independent processing of BOLD image (standard)"
    fi

    # -- Use of distortion correction methods

    if [ "${DistortionCorrection}" == 'NONE' ]; then
      log_Msg "-> Set not to use any distortion correction method (extended)"
      Compliance="extended"
    else
      log_Msg "-> Distortion correction method specified (${DistortionCorrection}; standard)"
    fi

    # -- Use of BOLD mask

    if [ ! "${Mask}" == 'T1' ]; then
      log_Msg "-> Set to use mask: ${Mask} (extended)"
      Compliance="extended"
    else
      log_Msg "-> Set to use T1w image based mask (standard)"
    fi

    # -- Preregister code

    if [ ! "${Preregister}" == 'epi_reg' ]; then
      Compliance="extended"
      log_Msg "-> Set to use ${Preregister} for bold image pre-registration (extended)"
    else
      log_Msg "-> Set to use ${Preregister} for bold image pre-registration (standard)"
    fi

    # -- BOLD registration to reference image

    if [ ! "${ReferenceReg}" == 'linear' ]; then
      Compliance="extended"
      log_Msg "-> Set to use ${ReferenceReg} registration to reference image (extended)"
    else
      log_Msg "-> Set to use ${ReferenceReg} registration to reference image (standard)"
    fi 
}

check_mpp_fMRISurface()
{
    log_Msg "-> No extended functionality"
}

check_mpp_Diffusion()
{
    log_Msg "-> No extended functionality"   
}



#  --- Main function for checking compliance
# 
#  Use: check_mpp_compliance <pipeline name>


check_mpp_compliance()
{

    # --- Define variables

    local pipeline=$1
    local hcpversion=`cat "$HCPPIPEDIR"/version.txt`
    local Compliance="standard"
    local ispipeline="false"

    # --- check and abort if pipeline name is not known

    check_pipeline_name

    if [ "${ispipeline}" == "false" ]; then
        log_Err_Abort "${pipeline} is not a valid HCP Pipeline name. Aborting execution!"
    fi

    # --- Initial information

    if [ "${MPPVersion}" = "extended" ]; then
      log_Msg "Extended Minimal Preprocessing Pipelines: ${pipeline} ${version}"
      log_Msg "NOTICE: You are using MPP mode that enables processing of images that do not"
      log_Msg "        conform to the HCP specification as described in Glasser et al. (2013)!"
      log_Msg "        Be aware that if the HCP requirements are not met, the level of data quality"
      log_Msg "        can not be guaranteed and the Glasser et al. (2013) paper should not be used"
      log_Msg "        in support of this workflow. A manuscript with comprehensive evaluation for"
      log_Msg "        the Extended MPP workflow is in active preparation and should be appropriately"
      log_Msg "        cited when published."
      log_Msg "        "
      log_Msg "Checking available data and processing options"
    else
      log_Msg "Standard HCP Minimal Preprocessing Pipelines: ${pipeline} ${version}"
      log_Msg "Checking data compliance with Standard HCP MPP"
    fi

    check_mpp_${pipeline}

    # -- Final evaluation

    if [ "${MPPVersion}" = "extended" ]; then
      if [ "${Compliance}" = "extended" ]; then
        log_Msg "Processing will continue using Extended MPP mode."
      else
        log_Warn "All conditions for the use of Standard HCP MPP are met. Consider using Standard HCP MPP mode instead of Extended MPP mode."
        log_Msg "Processing will continue using Extended MPP mode."
      fi
    else
      if [ "${Compliance}" = "extended" ]; then
        log_Err_Abort "User requested Standard HCP MPP mode. However, compliance check for use of Standard HCP MPP mode failed."
      else
        log_Msg "Conditions for the use of Standard HCP MPP mode are met."
        log_Msg "Processing will continue using Standard HCP MPP."
      fi
    fi

}





#!/bin/echo This script should not be run directly:

# Max number of dots in FSL-version strings.
# We assume the FSL version is a maximum of 4 digits separated 
# by 3 dots such as X.Y.Z.W (e.g. 6.0.7.6)
MAX_NDOTS_IN_FSLVERSION=3

# Minimum required FSL version for GE_HEALTHCARE_LEGACY_METHOD_OPT and GE_HEALTHCARE_METHOD_OPT
# for processing of B0Maps. See global/scripts/FieldMapPreprocessingAll.sh
# and fMRIVolume/GenericfMRIVolumeProcessingPipeline.sh
GEHEALTHCARE_MINIMUM_FSL_VERSION="6.0.7.1"

#
# Function Description
#  Get the current version string for FSL
#
#  Depends on FSLDIR environment variable
#
# Usage Example:
#  fsl_version_get fsl_ver
#  log_Msg "FSL version: ${fsl_ver}"
# 
fsl_version_get()
{
    local fsl_version_file
    local fsl_version
    local __functionResultVar=${1}

    fsl_version_file="${FSLDIR}/etc/fslversion"

    if [ -f ${fsl_version_file} ]
    then
        fsl_version=`cat ${fsl_version_file}`
        log_Msg "INFO: Determined that the FSL version in use is ${fsl_version}"
    else
        log_Msg "ERROR: Cannot tell which version of FSL you are using."
        exit 1
    fi

    eval $__functionResultVar="'${fsl_version}'"
}

#
# Function Description
#  Standardize the FSL-version number (in argument 1) for easy
#  version check and comparison
#  
#  This function take a version number (e.g. 6.0.4)
#  and format it as Num.Num.Num.Num (e.g. 6.0.4.0). 
#  This make the version comparison/check easier 
#  (e.g. when comparing 6.0.4.0 with 6.0.4.1). 
#  Here we assume that FSL-version is not using more than
#  4 digits and 3 dots (M.X.Y.Z), otherwise increase max_ndots. 
#
#  Some formatting examples:
#  6 => 6.0.0.0 
#  6.0 => 6.0.0.0
#  6.0.4 => 6.0.4.0
#  6.0.4.12 => 6.0.4.12 
#
# Usage Example:
#  fsl_ver2=$(fsl_version_format "6.0.4")
#
fsl_version_format(){
    local fv="${1}"
    local ndots
    # maximum number of dots in FSL-version string
    local max_ndots=$MAX_NDOTS_IN_FSLVERSION

    ndots=$(awk -F"." '{print NF-1}' <<< "$fv")

    while [ "$ndots" -lt "$max_ndots" ]; do
        fv="$fv".0
        ndots=$(awk -F"." '{print NF-1}' <<< "$fv")
    done
    
    echo "$fv"
}

# Function Description
#  Check if the current FSL version (the FSL version in use) 
#  is at least equal to the version given in argument 1 ($1). 
#
#  This function echoes string "true" (if FSL-version >= argument1) 
#  or "false" (if FSL-version < argument1).
#  It is up to the user to decide what to do with this information. 
# 
# Usage Example:
#  ret_val=$(fsl_minimum_required_version "6.0.7.2")
#  if [ "$ret_val" == "false" ]; then
#      log_Msg "ERROR: FSL minimum required version is 6.0.7.2. 
#      exit 1
#  else 
#      log_Msg "INFO: FSL version > 6.0.7.2"
#      echo "do something..."
#  fi 
# 
fsl_minimum_required_version(){
    local min_ver="${1}" 
    local cur_ver 
    local min_ver_array
    local cur_ver_array
    local ndots_cur_ver
    local ndots_min_ver
    # maximum number of dots in FSL-version string
    local max_ndots

    # get current FSL version
    fsl_version_get cur_ver >> /dev/null

    # if the 2 version strings are identical, no need to test further
    if [ "$cur_ver" == "$min_ver" ]; 
    then
        echo "true"
        return 0
    fi

    # split version by dots
    IFS=. read -a cur_ver_array <<< "$cur_ver"
    IFS=. read -a min_ver_array <<< "$min_ver"

    # count the dots
    ndots_cur_ver=$((${#cur_ver_array[@]} - 1))
    ndots_min_ver=$((${#min_ver_array[@]} - 1))

    # the version comparison consider "x.0 is newer than x"
    for ((i = 0; i < ${#cur_ver_array[@]} && i < ${#min_ver_array[@]}; ++i)); 
    do 
        # compare version numbers. is "current < minimum" ?
        if ((cur_ver_array[i] < min_ver_array[i])); 
        then 
            echo "false"
            return 0
        fi

        # compare version numbers. is "current > minimum" ?
        if ((cur_ver_array[i] > min_ver_array[i])); 
        then 
            echo "true"
            return 0
        fi
    done

    # if current string length >= minimum version string length then true
    if ((${#cur_ver_array[@]} >= ${#min_ver_array[@]})); 
    then 
        echo "true"
        return 0
    fi
    
    echo "false"
    return 0
}

# Function Description
#  Log the current version of FSL (the FSL version in use) 
#  Check if the current version is at least equal to the version 
#  given in argument 1 ($1) and abort if the minimum FSL version
#  criterion is not met. A specialized error message can be given 
#  in argument 2 ($2).  
#
# Usage Example:
#  fsl_minimum_required_version_check "6.0.7.1" "My Optional Error Message"
# 
fsl_minimum_required_version_check(){
    local min_ver="${1}"
    local my_err_msg="${2}"
    local cur_ver
    local min_criterion_met
    
    fsl_version_get cur_ver
    min_criterion_met=$(fsl_minimum_required_version "$min_ver")

    if [ "$min_criterion_met" == "true" ]; then
        log_Msg "INFO: The minimum FSL version criterion is met (minimum-version: ${min_ver} <= current-version ${cur_ver})"
    else
        if [[ -n "$my_err_msg" ]]; then
            log_Err "$my_err_msg"
        fi
        log_Err_Abort "The minimum FSL version criterion is NOT met (minimum-version: ${min_ver} > current-version ${cur_ver})"
    fi
}

#!/bin/bash

#   hcp_fix_multi_run - wrapper script for FIX, for HCP pipelines to clean multiple fMRI runs at a time
#   (useful for cleaning shorter runs)
#
#   Requires FIX version 1.067 or later and FSL 6.0 melodic version
#
#   Stephen Smith and Matthew F. Glasser
#
#   SHCOPYRIGHT
#
#   Changes by Timothy B. Brown <tbbrown@wustl.edu>
#
#   1) Changes to support 7T ICAFIX processing based on changes originally made by Keith Jamison <kjamison@umn.edu>
#   2) Changes to log output messages to aid in debugging 
#
#   Changes by Tim Coalson
#
#   1) use melodic from $PATH by default, to make it easier to replace the default version FSL ships with
#   2) use newopts, but support old positional parameters
#
#   Changes by Takuya Hayashi
#
#   1) use brain mask in melodic to reduce memory usage (helps get around bad default compilation operations)
#
#   Changes by Michael Harms
#
#   1) Improvements to script readability and consistency
#   2) Addition of a polynomial detrend option
#   3) Addition of FIX threshold as optional parameter

#############################################################
set -eu

#newopts supports "-h", so look for a single - even though virtually everything uses --
if (($# > 0)) && [[ "$1" != -* ]]
then
	#old usage: hcp_fix_multi_run <4D_FMRI_data> <highpass> <concat_name> <do_motion_regression> [<TrainingFile>] [<FixThreshold>] [<DeleteIntermediates>] [<FallbackThreshold>]
	if (($# < 4))
	then
		echo "old positional argument syntax requires a minimum of 4 arguments" 1>&2
		exit 1
	fi
	newargs=(--fmri-names="$1" --high-pass="$2" --concat-fmri-name="$3" --motion-regression="$4")
	#mac's ancient bash doesn't support case ;& fallthrough, so use ifs
	if (($# >= 5))
	then
		newargs+=(--training-file="$5")
	fi
	if (($# >= 6))
	then
		newargs+=(--fix-threshold="$6")
	fi
	if (($# >= 7))
	then
		newargs+=(--delete-intermediates="$7")
	fi
	if (($# >= 8))
	then
		newargs+=(--fallback-threshold="$8")
	fi
	if (($# > 8))
	then
		echo "unexpected extra arguments, aborting" 1>&2
		exit 1
	fi
	echo "legacy arguments specified: $*"
	set -- "${newargs[@]}"
	echo "converted to new arguments: $*"
fi

pipedirguessed=0
if [[ "${HCPPIPEDIR:-}" == "" ]]
then
	pipedirguessed=1
	#fix this if the script is more than one level below HCPPIPEDIR
	export HCPPIPEDIR="$(dirname -- "$0")/.."
fi

source "$HCPPIPEDIR/global/scripts/newopts.shlib" "$@"
source "$HCPPIPEDIR/global/scripts/debug.shlib" "$@"
source "$HCPPIPEDIR/global/scripts/processingmodecheck.shlib" "$@"

#description to use in usage - syntax of parameters is now explained automatically
opts_SetScriptDescription "Apply FIX cleaning to a concatenated set of input files"

#arguments to opts_Add*: switch, variable to set, name for inside of <> in help text, description, [default value if AddOptional], [compatibility flag, ...]
#help info for option gets printed like "--foo=<$3> - $4"
opts_AddMandatory '--fmri-names' 'fmrilist' 'run1@run2@run3...' "List of the individual fMRI runs to concatenate, joined with '@' symbol (not spaces)
Relative paths (from launching directory) are allowed, .nii.gz extensions are optional
All runs are assumed to have the same repetition time (TR)"

opts_AddMandatory '--high-pass' 'hp' 'number' 'If > 0, is the temporal highpass full-width (2*sigma), in seconds, to apply using "fslmaths -bptf"
If a string "pd#", where # is an integer, applies polynomial detrending of order #
    Use "pd1" for a linear detrend, "pd2" for a quadratic detrend, etc
    Greater than pd5 is not allowed because of numeric instability
    File names will include "_hppd#"
If = 0, a linear detrend is applied, same as "pd1", but file names will instead include "_hp0"
To mimic detrending-like behaviour using the fslmaths approach, set <highpass> to 2000
(Note that "fslmaths -bptf" is much slower than the regression based polynomial detrending)'

opts_AddMandatory '--concat-fmri-name' 'ConcatName' 'run1_to_3' "Name (including relative or absolute path) to give to the concatenated output files"

opts_AddOptional '--motion-regression' 'doMotionRegression' 'TRUE or FALSE' "Controls whether to regress motion parameters as part of the cleaning, default FALSE" 'FALSE'

opts_AddOptional '--training-file' 'TrainingData' 'somefile.RData' 'Specify a custom training file, defaults to "HCP_Style_Single_Multirun_Dedrift.RData"' ''

opts_AddOptional '--fix-threshold' 'FixThresh' 'number' 'Threshold setting in FIX that controls the sensitivity/specificity tradeoff, default = 10' '10'

opts_AddOptional '--delete-intermediates' 'DeleteIntermediates' 'TRUE or FALSE' 'If TRUE, deletes both the concatenated high-pass filtered and non-filtered timeseries files that are prerequisites to FIX cleaning, default = FALSE
(The concatenated, hpXX_clean timeseries files are preserved for use in downstream scripts)
Note, deleting intermediates is not recommended for MR FIX' 'FALSE'

opts_AddOptional '--fallback-threshold' 'RewishartThresh' 'number' 'If greater than zero, reruns icaDim with a single wishart on any run with a VN mean more than this amount greater than the minimum VN mean, default = 0' '0'

#third argument here is name to use in the config file
opts_AddConfigOptional '--vol-wisharts' 'volwisharts' 'volwisharts' 'integer' 'Number of wisharts to fit to volume data in icaDim, default 2' '2'

opts_AddConfigOptional '--cifti-wisharts' 'ciftiwisharts' 'ciftiwisharts' 'integer' 'Number of wisharts to fit to cifti data in icaDim, default 3' '3'

opts_AddConfigOptional '--icadim-mode' 'icadimmode' 'icadimmode' '"default" or "fewtimepoints"' 'Choose how to run icaDim:
"default" - start with a VN dimensionality of 1 and rerun until convergence
"fewtimepoints" - start with a VN dimensionality of half the timepoints, do not iterate' 'default'

opts_AddOptional '--processing-mode' 'ProcessingMode' '"HCPStyleData" (default) or "LegacyStyleData"' "controls whether --icadim-mode=fewtimepoints is allowed" 'HCPStyleData'

opts_ParseArguments "$@"

if ((pipedirguessed))
then
	log_Err_Abort "HCPPIPEDIR is not set, you must first source your edited copy of Examples/Scripts/SetUpHCPPipeline.sh"
fi

#display the parsed/default values
opts_ShowValues

#############################################################

Compliance="HCPStyleData"
ComplianceMsg=""

if [[ "$icadimmode" == 'fewtimepoints' ]]
then
	Compliance="LegacyStyleData"
	ComplianceMsg+=" --icadim-mode=$icadimmode"
	log_Warn "The use of 'fewtimepoints' mode in icaDim skips the iterative fitting process for the wishart distributions, and is only intended as a workaround for data that does not have enough timepoints for the default icaDim mode to work properly."
fi

check_mode_compliance "$ProcessingMode" "$Compliance" "$ComplianceMsg"

unset POSIXLY_CORRECT

# Set global variables
g_script_name=$(basename "${0}")

source "${HCPPIPEDIR}/global/scripts/fsl_version.shlib" "$@" # Functions for getting FSL version

# Verify required environment variables are set and log value
log_Check_Env_Var HCPPIPEDIR
log_Check_Env_Var CARET7DIR
log_Check_Env_Var FSLDIR
log_Check_Env_Var FSL_FIXDIR
log_Check_Env_Var HCPCIFTIRWDIR

log_debugOn="" # Set to any non-empty string (e.g., "true") to turn on debugging related output
			   # Set to empty string to disable debugging related output

#mac readlink doesn't have -f
if [[ -L "$0" ]]
then
	this_script_dir=$(dirname "$(readlink "$0")")
else
	this_script_dir=$(dirname "$0")
fi

# All fix settings are held in the settings.sh file - edit this file to suit your setup
# Default settings file that comes with fix isn't "ERR"/-u clean, so disable temporarily
debug_disable_trap
set +u
source "${FSL_FIXDIR}/settings.sh"
set -u
debug_enable_trap

# Show HCP pipelines version
log_Msg "Showing HCP Pipelines version"
"${HCPPIPEDIR}"/show_version --short

# Show wb_command version
log_Msg "Showing Connectome Workbench (wb_command) version"
${CARET7DIR}/wb_command -version

# Show FSL version
log_Msg "Showing FSL version"
fsl_version_get fsl_ver
log_Msg "FSL version: ${fsl_ver}"

# Show specific FIX version, if available
if [ -f ${FSL_FIXDIR}/fixversion ]; then
	fixversion=$(cat ${FSL_FIXDIR}/fixversion )
	log_Msg "FIX version: $fixversion"
fi

# Log FSL_FIX_MATLAB_MODE (from the settings.sh file)
log_Msg "FSL_FIX_MATLAB_MODE: ${FSL_FIX_MATLAB_MODE}"

# Override the version of FSL_FIX_WBC in settings.sh with that specified by CARET7DIR
Caret7_Command="${CARET7DIR}/wb_command"
FSL_FIX_WBC=${Caret7_Command}  # Used by fix_3_clean in interpreted matlab/octave mode


#############################################################

### Support Functions

# NOTE:
#   Don't echo anything in this function other than the last echo
#   that outputs the return value
#
determine_old_or_new_fsl()
{
	local fsl_version=${1}
	local old_or_new
	local fsl_version_array
	local fsl_primary_version
	local fsl_secondary_version
	local fsl_tertiary_version

	# parse the FSL version information into primary, secondary, and tertiary parts
	fsl_version_array=(${fsl_version//./ })

	fsl_primary_version="${fsl_version_array[0]}"
	fsl_primary_version=${fsl_primary_version//[!0-9]/}
	
	fsl_secondary_version="${fsl_version_array[1]}"
	fsl_secondary_version=${fsl_secondary_version//[!0-9]/}
	
	fsl_tertiary_version="${fsl_version_array[2]}"
	fsl_tertiary_version=${fsl_tertiary_version//[!0-9]/}

	# determine whether we are using "OLD" or "NEW" FSL 
	# 6.0.0 and below is "OLD"
	# 6.0.1 and above is "NEW"
	
	if [[ $(( ${fsl_primary_version} )) -lt 6 ]] ; then
		# e.g. 4.x.x, 5.x.x
		old_or_new="OLD"
	elif [[ $(( ${fsl_primary_version} )) -gt 6 ]] ; then
		# e.g. 7.x.x
		old_or_new="NEW"
	else
		# e.g. 6.x.x
		if [[ $(( ${fsl_secondary_version} )) -gt 0 ]] ; then
			# e.g. 6.1.x
			old_or_new="NEW"
		else
			# e.g. 6.0.x
			if [[ $(( ${fsl_tertiary_version} )) -lt 1 ]] ; then
				# e.g. 6.0.0
				old_or_new="OLD"
			else
				# e.g. 6.0.1, 6.0.2, 6.0.3 ...
				old_or_new="NEW"
			fi
		fi
	fi

	echo ${old_or_new}
}

demeanMovementRegressors() {
	In=${1}
	log_Debug_Msg "demeanMovementRegressors: In: ${In}"
	Out=${2}
	log_Debug_Msg "demeanMovementRegressors: Out: ${Out}"
	log_Debug_Msg "demeanMovementRegressors: getting nCols"
	nCols=$(head -1 ${In} | wc -w)
	
	log_Debug_Msg "demeanMovementRegressors: nCols: ${nCols}"
	log_Debug_Msg "demeanMovementRegressors: getting nRows"
	nRows=$(wc -l < ${In})
	log_Debug_Msg "demeanMovementRegressors: nRows: ${nRows}"
	
	AllOut=""
	c=1
	while (( c <= nCols )) ; do
		ColIn=`cat ${In} | sed 's/  */ /g' | sed 's/^ //g' | cut -d " " -f ${c}`
		bcstring=$(echo "$ColIn" | tr '\n' '+' | sed 's/\+*$//g')
		valsum=$(echo "$bcstring" | bc -l)
		valmean=$(echo "$valsum / $nRows" | bc -l)
		ColOut=""
		r=1
		while (( r <= nRows )) ; do
			val=`echo "${ColIn}" | head -${r} | tail -1`
			newval=`echo "${val} - ${valmean}" | bc -l`
			ColOut=`echo ${ColOut} $(printf "%10.6f" $newval)`
			r=$((r+1))
		done
		ColOut=`echo ${ColOut} | tr ' ' '\n'`
		AllOut=`paste <(echo "${AllOut}") <(echo "${ColOut}")`
		c=$((c+1))
	done
	echo "${AllOut}" > ${Out}
}

#############################################################

## ---------------------------------------------------------------------------
## Check whether FSL version is recent enough
## ---------------------------------------------------------------------------

old_or_new_version=$(determine_old_or_new_fsl ${fsl_ver})
if [ "${old_or_new_version}" == "OLD" ] ; then
	log_Err_Abort "FSL version 6.0.1 or greater is required."
fi

## ---------------------------------------------------------------------------
## Check parameters
## ---------------------------------------------------------------------------

IFS=@ read -a fmris <<<"$fmrilist"

if [[ "${hp}" == "0" ]]; then
	pdFlag=TRUE
fi
if [[ "${hp}" == pd* ]]; then
	hpNum=${hp:2}
	pdFlag=TRUE
	if (( hpNum > 5 )); then
		log_Err_Abort "Polynomial detrending of order ${hpNum} is not allowed (may not be numerically stable); Use 5th order or less"
	fi
else
	hpNum=${hp}
fi
if ! [[ "${hpNum}" =~ ^[-]?[0-9]+$ ]]; then
	log_Err_Abort "highpass value of ${hp} is not valid"
fi
if [[ $(echo "${hpNum} < 0" | bc) == "1" ]]; then  #Logic of this script does not support negative hp values
	log_Err_Abort "highpass value must not be negative"
fi

#opts_ version doesn't allow NONE as false, and outputs 1/0, not TRUE/FALSE
doMotionRegression=$(opts_StringToBool "$doMotionRegression")
DeleteIntermediates=$(opts_StringToBool "$DeleteIntermediates")

#--fallback-threshold's only change is using 1 for volume wisharts, so error if it is pointless?
if ((volwisharts == 1)) && [[ $(bc <<<"$RewishartThresh > 0") == 1 ]]
then
	log_Err_Abort "--fallback-threshold is not allowed when --vol-wisharts=1 is used"
fi

## ---------------------------------------------------------------------------
## Report parameters
## ---------------------------------------------------------------------------

#everything else was redundant (with minor differences) due to opts_ShowValues
if [[ "${hp}" == "0" ]]; then
	log_Msg "hp=0 corresponds to a linear detrend"
fi

if [[ "$icadimmode" == "fewtimepoints" ]] && ((volwisharts > 1 || ciftiwisharts > 1))
then
	log_Warn "--icadim-mode='fewtimepoints' is being used with multiple wisharts, multiple wishart fitting is not expected to work well when the data has few timepoints"
fi

DIR=`pwd`
log_Msg "PWD: $DIR"

# For INTERPRETED MODES, make sure that matlab/octave has access to the functions it needs.
# normalise.m (needed by functionhighpassandvariancenormalize.m) is in '${HCPPIPEDIR}/global/matlab'
# Note that the call_matlab.sh script itself adds ${FSL_FIXDIR} (all the fix-related functions)
# and ${FSL_MATLAB_PATH} (e.g., read_avw.m, save_avw.m) to the matlab path.
# Note that fix_3_clean.m *appends* ${FSL_FIX_CIFTIRW} (defined in ${FSL_FIXDIR}/settings.sh)
# to the matlab path (i.e., the ciftiopen.m, ciftisave.m functions).
# The pipelines CIFTI I/O functions have been moved to a subdirectory, and the SetUp... script selects what to use with HCPCIFTIRWDIR.
# AND since 'addpath' *prepends* to the matlab path, the version in HCPCIFTIRWDIR will therefore take precedence.
ML_PATHS="addpath('${HCPPIPEDIR}/global/fsl/etc/matlab'); addpath('${HCPCIFTIRWDIR}'); addpath('${HCPPIPEDIR}/global/matlab/icaDim'); addpath('${HCPPIPEDIR}/global/matlab'); addpath('${this_script_dir}/scripts');"

## ---------------------------------------------------------------------------
## Preparation (highpass) on the individual runs
## ---------------------------------------------------------------------------

#Loops over the runs and do highpass on each of them
log_Msg "Looping over files and doing highpass to each of them"

NIFTIvolMergeARRAY=()
NIFTIvolhpVNMergeARRAY=()
SBRefVolARRAY=()
MeanVolARRAY=()
VNVolARRAY=()
CIFTIMergeARRAY=()
CIFTIhpVNMergeARRAY=()
MeanCIFTIARRAY=()
VNCIFTIARRAY=()
MovementNIFTIMergeARRAY=()
MovementNIFTIhpMergeARRAY=()
MovementTXTMergeARRAY=()

for fmri in "${fmris[@]}" ; do
	log_Msg "Top of loop through fmris: fmri: ${fmri}"

	fmriNoExt=$($FSLDIR/bin/remove_ext $fmri)  # $fmriNoExt still includes leading directory components

	# Create necessary strings for merging across runs
	# N.B. Some of these files don't exist yet, and are about to get created
	NIFTIvolMergeARRAY+=("${fmriNoExt}_demean")
	NIFTIvolhpVNMergeARRAY+=("${fmriNoExt}_hp${hp}_vnts")  #These are the individual run, VN'ed *time series*
	SBRefVolARRAY+=("${fmriNoExt}_SBRef")
	MeanVolARRAY+=("${fmriNoExt}_mean")
	VNVolARRAY+=("${fmriNoExt}_hp${hp}_vn")  #These are the individual run, VN'ed NIFTI *maps* (created by functionhighpassandvariancenormalize)
	CIFTIMergeARRAY+=(-cifti "${fmriNoExt}_Atlas_demean.dtseries.nii")
	CIFTIhpVNMergeARRAY+=(-cifti "${fmriNoExt}_Atlas_hp${hp}_vn.dtseries.nii")
	MeanCIFTIARRAY+=(-cifti "${fmriNoExt}_Atlas_mean.dscalar.nii")
	VNCIFTIARRAY+=(-cifti "${fmriNoExt}_Atlas_hp${hp}_vn.dscalar.nii")  #These are the individual run, VN'ed CIFTI *maps* (created by functionhighpassandvariancenormalize)
	MovementNIFTIMergeARRAY+=("${fmriNoExt}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf")
	MovementNIFTIhpMergeARRAY+=("${fmriNoExt}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_hp")
	
	cd `dirname $fmri`
	log_Debug_Msg "pwd: "$(pwd)
	fmri=`basename $fmri`  # After this, $fmri no longer includes the leading directory components
	fmri=`$FSLDIR/bin/imglob $fmri`  # After this, $fmri will no longer have an extension (if there was one initially)
	if [ `$FSLDIR/bin/imtest $fmri` != 1 ]; then
		log_Err_Abort "Invalid 4D_FMRI input file specified: ${fmri}"
	fi

	# Get Movement_Regressors.txt into the format expected by functionhighpassandvariancenormalize.m
	mkdir -p ${fmri}_hp${hp}.ica/mc
	if [ -f Movement_Regressors.txt ] ; then
		log_Debug_Msg "About to create ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf.par file"
		cat Movement_Regressors.txt | awk '{ print $4 " " $5 " " $6 " " $1 " " $2 " " $3}' > ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf.par
	else
		log_Err_Abort "Movement_Regressors.txt not retrieved properly." 
	fi

	#Demean movement regressors
	demeanMovementRegressors Movement_Regressors.txt Movement_Regressors_demean.txt
	MovementTXTMergeARRAY+=("$(pwd)/Movement_Regressors_demean.txt")

	#Demean volumes
	${FSLDIR}/bin/fslmaths $fmri -Tmean ${fmri}_mean
	${FSLDIR}/bin/fslmaths $fmri -sub ${fmri}_mean ${fmri}_demean

	#Demean CIFTI
	${Caret7_Command} -cifti-reduce ${fmri}_Atlas.dtseries.nii MEAN ${fmri}_Atlas_mean.dscalar.nii
	${Caret7_Command} -cifti-math "TCS - MEAN" ${fmri}_Atlas_demean.dtseries.nii -var TCS ${fmri}_Atlas.dtseries.nii -var MEAN ${fmri}_Atlas_mean.dscalar.nii -select 1 1 -repeat
	
	## "1st pass" VN on the individual runs; high-pass gets done here as well
	#fslval puts a space on the end of its number, remove it...
	tr=`$FSLDIR/bin/fslval $fmri pixdim4 | tr -d ' '`  #No checking currently that TR is same across runs
	log_Msg "tr: ${tr}"  
	log_Msg "processing FMRI file ${fmri} with highpass ${hp}"

	## MPH: Log output to existing stdout/stderr, rather than a separate .fix.functionhighpassandvariancenormalize.log file
	#if [ -e .fix.functionhighpassandvariancenormalize.log ] ; then
	#	/bin/rm .fix.functionhighpassandvariancenormalize.log
	#fi

	## We will use the call_matlab.sh script available in ${FSL_FIXDIR}.
	## But the arguments need to be customized depending on the matlab mode, because:
	## (1) the -r argument does not support the use of compiled matlab, but is needed for interpreted matlab/octave
	## to allow addition of 'addpath' as a command, so that functionhighpassandvariancenormalize.m can be found within matlab/octave.
	## (2) for compiled matlab, we need to use the -c and -b flags to specify the location of the MCR and the compiled binary.
	## (We cannot use the defaults in ${FSL_FIXDIR}/settings.sh here, since functionhighpassandvariancenormalize.m is an HCP
	## specific script that is not part of the FIX distribution).

	case ${FSL_FIX_MATLAB_MODE} in
		0)
			# Use compiled Matlab
			if [ -z "${MATLAB_COMPILER_RUNTIME:-}" ]; then
				log_Err_Abort "To use MATLAB run mode: ${FSL_FIX_MATLAB_MODE}, the MATLAB_COMPILER_RUNTIME environment variable must be set"
			else
				log_Msg "MATLAB_COMPILER_RUNTIME: ${MATLAB_COMPILER_RUNTIME}"
			fi

			CSUBDIR=${HCPPIPEDIR}/ICAFIX/scripts/Compiled_functionhighpassandvariancenormalize
			matlab_cmd=("${FSL_FIXDIR}/call_matlab.sh" -c "${MATLAB_COMPILER_RUNTIME}" -b "$CSUBDIR" -f functionhighpassandvariancenormalize "$tr" "$hp" "$fmri" "${Caret7_Command}" "" "$volwisharts" "$ciftiwisharts" "$icadimmode")
			log_Msg "Run compiled MATLAB with command..."
			log_Msg "${matlab_cmd[*]}"
			"${matlab_cmd[@]}"
			;;
		
		1 | 2)
			# Use interpreted MATLAB or Octave
			# ${hp} needs to be passed in as a string, to handle the hp=pd* case
			matlab_code="${ML_PATHS} functionhighpassandvariancenormalize(${tr}, '${hp}', '${fmri}', '${Caret7_Command}', '', ${volwisharts}, ${ciftiwisharts}, '${icadimmode}');"
			log_Msg "Run interpreted MATLAB/Octave with command..."
			log_Msg "${FSL_FIXDIR}/call_matlab.sh -r ${matlab_code}"
			${FSL_FIXDIR}/call_matlab.sh -r "${matlab_code}"   # Note: the semicolons within ${matlab_code} need to be protected with quotation marks
			;;
		*)
			# Unsupported MATLAB run mode
			log_Err_Abort "Unsupported MATLAB run mode value (FSL_FIX_MATLAB_MODE) in $FSL_FIXDIR/settings.sh: ${FSL_FIX_MATLAB_MODE}"
			;;
	esac

	log_Msg "Dims: $(cat ${fmri}_dims.txt)"

	# Demean the movement regressors (in the 'fake-NIFTI' format returned by functionhighpassandvariancenormalize)
	fslmaths ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf -Tmean ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean
	fslmaths ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf -sub ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf
	$FSLDIR/bin/imrm ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean

	cd ${DIR}  # Return to directory where script was launched
	
	log_Msg "Bottom of loop through fmris: fmri: ${fmri}"

done  ### END LOOP (for fmri in $fmris; do)


#note: this test a string comparison, not a math comparison
if [[ "$RewishartThresh" != "0" ]]
then
	vnmeans=()
	runnames=()
	for fmri in "${fmris[@]}"
	do
		thismean=$("$Caret7_Command" -volume-stats "$fmri"_hp"$hp"_vn.nii.gz -reduce MEAN -roi "$fmri"_finalmask.nii.gz)
		echo "$(basename "$fmri") vn mean: $thismean"
		fmriarray+=("$fmri")
		vnmeans+=("$thismean")
		
		#check for first time through loop
		if ((${#vnmeans[@]} == 1))
		then
			minvn="$thismean"
		else
			minvn=$(bc -l <<<"if ($thismean > $minvn) $minvn else $thismean")
		fi
	done
	for ((i = 0; i < ${#vnmeans[@]}; ++i))
	do
		echo "test: ${vnmeans[$i]} > $minvn + $RewishartThresh"
		if [[ $(bc <<<"${vnmeans[$i]} > $minvn + $RewishartThresh") == "1" ]]
		then
			#rerun with 1 wishart
			fmri="${fmriarray[$i]}"
			#fmri is modified by basename and some other stuff, tr is derived from file...
			cd `dirname $fmri`
			log_Debug_Msg "pwd: "$(pwd)
			fmri=`basename $fmri`  # After this, $fmri no longer includes the leading directory components
			fmri=`$FSLDIR/bin/imglob $fmri`  # After this, $fmri will no longer have an extension (if there was one initially)

			#log the fact that we are rerunning this one
			log_Msg "rerunning functionhighpassandvariancenormalize on outlier run $fmri"

			#TSC: assume _mean and _demean haven't been overwritten or deleted?
			
			## "1st pass" VN on the individual runs; high-pass gets done here as well
			tr=`$FSLDIR/bin/fslval $fmri pixdim4 | tr -d ' '`  #No checking currently that TR is same across runs
			log_Msg "tr: ${tr}"  
			log_Msg "processing FMRI file ${fmri} with highpass ${hp}"

			if [ `$FSLDIR/bin/imtest $fmri` != 1 ]; then
				log_Err_Abort "Invalid 4D_FMRI input file specified: ${fmri}"
			fi

			case ${FSL_FIX_MATLAB_MODE} in
				0)
					# Use compiled Matlab
					if [ -z "${MATLAB_COMPILER_RUNTIME}" ]; then
						log_Err_Abort "To use MATLAB run mode: ${FSL_FIX_MATLAB_MODE}, the MATLAB_COMPILER_RUNTIME environment variable must be set"
					else
						log_Msg "MATLAB_COMPILER_RUNTIME: ${MATLAB_COMPILER_RUNTIME}"
					fi

					CSUBDIR=${HCPPIPEDIR}/ICAFIX/scripts/Compiled_functionhighpassandvariancenormalize
					#call_matlab.sh does pass empty string properly, as does run_<whatever>.sh generated by mcc r2017b (literal ' or " would be trouble, but should be rare)
					matlab_cmd=("${FSL_FIXDIR}/call_matlab.sh" -c "${MATLAB_COMPILER_RUNTIME}" -b "${CSUBDIR}" -f functionhighpassandvariancenormalize "${tr}" "${hp}" "${fmri}" "${Caret7_Command}" "" 1 "$ciftiwisharts" "$icadimmode")
					log_Msg "Run compiled MATLAB with command..."
					log_Msg "${matlab_cmd[*]}"
					"${matlab_cmd[@]}"
					;;
				1 | 2)
					# Use interpreted MATLAB or Octave
					# ${hp} needs to be passed in as a string, to handle the hp=pd* case
					matlab_code="${ML_PATHS} functionhighpassandvariancenormalize(${tr}, '${hp}', '${fmri}', '${Caret7_Command}', '', 1, ${ciftiwisharts}, '${icadimmode}');"
					log_Msg "Run interpreted MATLAB/Octave with command..."
					log_Msg "${FSL_FIXDIR}/call_matlab.sh -r ${matlab_code}"
					${FSL_FIXDIR}/call_matlab.sh -r "${matlab_code}"   # Note: the semicolon within ${matlab_code} needs to be protected with quotation marks
					;;
				*)
					# Unsupported MATLAB run mode
					log_Err_Abort "Unsupported MATLAB run mode value (FSL_FIX_MATLAB_MODE) in $FSL_FIXDIR/settings.sh: ${FSL_FIX_MATLAB_MODE}"
					;;
			esac

			log_Msg "Dims: $(cat ${fmri}_dims.txt)"

			# Demean the movement regressors (in the 'fake-NIFTI' format returned by functionhighpassandvariancenormalize)
			fslmaths ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf -Tmean ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean
			fslmaths ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf -sub ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf
			$FSLDIR/bin/imrm ${fmri}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_mean

			cd ${DIR}  # Return to directory where script was launched
			
			log_Msg "Bottom of loop through fmris: fmri: ${fmri}"
		fi
	done
fi

## ---------------------------------------------------------------------------
## Concatenate the individual runs and create necessary files
## ---------------------------------------------------------------------------

#Make Concatenated Folder
ConcatFolder=`dirname ${ConcatName}`
log_Msg "Making concatenated folder: ${ConcatFolder}"
if [ ! -e ${ConcatFolder} ] ; then  
	mkdir ${ConcatFolder} 
else
	/bin/rm -r ${ConcatFolder}
	log_Warn "Previous ${ConcatFolder} directory removed"
	mkdir ${ConcatFolder}
fi

ConcatNameNoExt=$($FSLDIR/bin/remove_ext $ConcatName)  # No extension, but still includes the directory path

# Merge volumes from the individual runs
fslmerge -tr "${ConcatNameNoExt}_demean" "${NIFTIvolMergeARRAY[@]}" $tr
fslmerge -tr "${ConcatNameNoExt}_hp${hp}_vnts" "${NIFTIvolhpVNMergeARRAY[@]}" $tr
fslmerge -t  "${ConcatNameNoExt}_SBRef" "${SBRefVolARRAY[@]}"
fslmerge -t  "${ConcatNameNoExt}_mean" "${MeanVolARRAY[@]}"
fslmerge -t  "${ConcatNameNoExt}_hp${hp}_vn" "${VNVolARRAY[@]}"
# Average across runs
fslmaths "${ConcatNameNoExt}_SBRef" -Tmean "${ConcatNameNoExt}_SBRef"
fslmaths "${ConcatNameNoExt}_mean" -Tmean "${ConcatNameNoExt}_mean"  # "Grand" mean across runs
fslmaths "${ConcatNameNoExt}_demean" -add "${ConcatNameNoExt}_mean" "${ConcatNameNoExt}"
  # Preceding line adds back in the "grand" mean
  # Resulting file not used below, but want this concatenated version (without HP or VN) to exist
fslmaths "${ConcatNameNoExt}_hp${hp}_vn" -Tmean "${ConcatNameNoExt}_hp${hp}_vn"  # Mean VN map across the individual runs
fslmaths "${ConcatNameNoExt}_hp${hp}_vnts" -mul "${ConcatNameNoExt}_hp${hp}_vn" "${ConcatNameNoExt}_hp${hp}"
  # Preceding line restores the mean VN map
  # The resulting TCS becomes the input to a 2nd pass of VN, which then becomes the input to melodic
fslmaths "${ConcatNameNoExt}_SBRef" -bin "${ConcatNameNoExt}_brain_mask"
  # Preceding line creates mask to be used in melodic for suppressing memory error - Takuya Hayashi

# Same thing for the CIFTI
${Caret7_Command} -cifti-merge "${ConcatNameNoExt}_Atlas_demean.dtseries.nii" "${CIFTIMergeARRAY[@]}"
${Caret7_Command} -cifti-average "${ConcatNameNoExt}_Atlas_mean.dscalar.nii" "${MeanCIFTIARRAY[@]}"
${Caret7_Command} -cifti-math "TCS + MEAN" "${ConcatNameNoExt}_Atlas.dtseries.nii" -var TCS "${ConcatNameNoExt}_Atlas_demean.dtseries.nii" -var MEAN "${ConcatNameNoExt}_Atlas_mean.dscalar.nii" -select 1 1 -repeat
${Caret7_Command} -cifti-merge "${ConcatNameNoExt}_Atlas_hp${hp}_vn.dtseries.nii" "${CIFTIhpVNMergeARRAY[@]}"
${Caret7_Command} -cifti-average "${ConcatNameNoExt}_Atlas_hp${hp}_vn.dscalar.nii" "${VNCIFTIARRAY[@]}"
${Caret7_Command} -cifti-math "TCS * VN" "${ConcatNameNoExt}_Atlas_hp${hp}.dtseries.nii" -var TCS "${ConcatNameNoExt}_Atlas_hp${hp}_vn.dtseries.nii" -var VN "${ConcatNameNoExt}_Atlas_hp${hp}_vn.dscalar.nii" -select 1 1 -repeat

# At this point the concatenated VN'ed time series (both volume and CIFTI, following the "1st pass" VN) can be deleted
log_Msg "Removing the concatenated VN'ed time series"
"$FSLDIR/bin/imrm" "${ConcatNameNoExt}_hp${hp}_vnts"
/bin/rm -f "${ConcatNameNoExt}_Atlas_hp${hp}_vn.dtseries.nii"
# Alternatively, if the volume version is needed for any reason, need to at least rename it to avoid conflict with
# same named file that will get created by running functionhighpassandvariancenormalize on the concatfmrihp file
# during the "2nd pass" VN (below)
#$FSLDIR/bin/immv ${ConcatNameNoExt}_hp${hp}_vnts ${ConcatNameNoExt}_hp${hp}_vnts0

# Nor do we need the concatenated demeaned time series (either volume or CIFTI)
log_Msg "Removing the concatenated demeaned time series"
"$FSLDIR/bin/imrm" "${ConcatNameNoExt}_demean"
/bin/rm -f "${ConcatNameNoExt}_Atlas_demean.dtseries.nii"

# Also, we no longer need the individual run VN'ed or demeaned time series (either volume or CIFTI); delete to save space
for fmri in "${fmris[@]}" ; do
	log_Msg "Removing the individual run VN'ed and demeaned time series for ${fmri}"
	fmriNoExt=$("$FSLDIR/bin/remove_ext" "$fmri")  # $fmriNoExt still includes leading directory components
	"$FSLDIR/bin/imrm" "${fmriNoExt}_hp${hp}_vnts"
	"$FSLDIR/bin/imrm" "${fmriNoExt}_demean"
	/bin/rm -f "${fmriNoExt}_Atlas_hp${hp}_vn.dtseries.nii"
	/bin/rm -f "${fmriNoExt}_Atlas_demean.dtseries.nii"

	log_Msg "Removing the individual run HP'ed time series for ${fmri}"
	"$FSLDIR/bin/imrm" "${fmriNoExt}_hp${hp}"
	/bin/rm -f "${fmriNoExt}_Atlas_hp${hp}.dtseries.nii"
done

## ---------------------------------------------------------------------------
## Prepare for melodic on concatenated file
## ---------------------------------------------------------------------------

# concatfmri is intensity normalized and has no overall mean.
# It is also not variance normalized (the mean VN map *across runs* was "restored" above).
# But is detrended and within run demeaned and variance normalized for both volume and CIFTI
concatfmri=`basename ${ConcatNameNoExt}`  # Directory path is now removed
concatfmrihp=${concatfmri}_hp${hp}

#MPH: Need to be in original directory here, for the ${MovementNIFTI*ARRAY[@]} variables to work
#if user did not use absolute paths for input arguments
mkdir -p ${ConcatFolder}/${concatfmrihp}.ica
log_Debug_Msg "About to put contents of ${MovementTXTMergeARRAY[*]} in Movement_Regressors_demean.txt file"
cat "${MovementTXTMergeARRAY[@]}" > ${ConcatFolder}/Movement_Regressors_demean.txt
mkdir ${ConcatFolder}/${concatfmrihp}.ica/mc
fslmerge -tr ${ConcatFolder}/${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp "${MovementNIFTIhpMergeARRAY[@]}" $tr
fslmerge -tr ${ConcatFolder}/${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf "${MovementNIFTIMergeARRAY[@]}" $tr

#MPH: Now we can switch to ${ConcatFolder}
cd ${ConcatFolder}

## "2nd pass" VN
## This is solely so that we can apply our own variance normalization as part of the spatial ICA, 
## rather than using the VN algorithm internal to melodic
## (The resulting ${concatfmrihp}_vnts time series is NOT the one that gets cleaned by FIX).
## See comments above about regarding the use of call_matlab here.

AlreadyHP="-1" #Don't run highpass on concatenated data (since hp was done on the individual runs)

case ${FSL_FIX_MATLAB_MODE} in
	0)
		# Use compiled Matlab
		CSUBDIR=${HCPPIPEDIR}/ICAFIX/scripts/Compiled_functionhighpassandvariancenormalize
		matlab_cmd=("${FSL_FIXDIR}/call_matlab.sh" -c "${MATLAB_COMPILER_RUNTIME}" -b "$CSUBDIR" -f functionhighpassandvariancenormalize "$tr" "$AlreadyHP" "$concatfmrihp" "${Caret7_Command}" "" "$volwisharts" "$ciftiwisharts" "$icadimmode")
		log_Msg "Run compiled MATLAB with command..."
		log_Msg "${matlab_cmd[*]}"
		"${matlab_cmd[@]}"
		;;
		
	1 | 2)
		# Use interpreted MATLAB or Octave
		# ${hp} needs to be passed in as a string, to handle the hp=pd* case
		matlab_code="${ML_PATHS} functionhighpassandvariancenormalize(${tr}, ${AlreadyHP}, '${concatfmrihp}', '${Caret7_Command}', '', ${volwisharts}, ${ciftiwisharts}, '${icadimmode}');"
		log_Msg "Run interpreted MATLAB/Octave with code..."
		log_Msg "${FSL_FIXDIR}/call_matlab.sh -r ${matlab_code}"
		${FSL_FIXDIR}/call_matlab.sh -r "${matlab_code}"   # Note: the semicolons within ${matlab_code} need to be protected with quotation marks
		;;
	*)
		# Unsupported MATLAB run mode
		log_Err_Abort "Unsupported MATLAB run mode value (FSL_FIX_MATLAB_MODE) in $FSL_FIXDIR/settings.sh: ${FSL_FIX_MATLAB_MODE}"
		;;
esac

Dim=`cat ${concatfmrihp}_dims.txt`

log_Msg "Dim: ${Dim}"

## ---------------------------------------------------------------------------
## Run melodic on concatenated file
## ---------------------------------------------------------------------------

log_Debug_Msg "About to run melodic: Contents of ${concatfmrihp}.ica follow"
if [ ! -z "${log_debugOn}" ] ; then
	ls -lRa ${concatfmrihp}.ica
fi

#grab melodic from $PATH by default, don't hardcode it with respect to $FSLDIR
#we need to do "if which ..." because the script currently uses ERR trap
if which melodic &> /dev/null
then
	MELODIC=$(which melodic 2> /dev/null)
else
	#if it isn't even in $PATH, fall back on FSLDIR
	MELODIC="${FSLDIR}/bin/melodic"
fi

log_Msg "Running MELODIC located at: $MELODIC"
log_Debug_Msg "Beginning of melodic version log, help, and checksum"
if [ ! -z "${log_debugOn}" ] ; then
	log_Debug_Msg "$MELODIC --version"
	$MELODIC --version
	log_Debug_Msg "$MELODIC --help"
	$MELODIC --help
	log_Debug_Msg "md5sum $MELODIC"
	md5sum $MELODIC
fi
log_Debug_Msg "End of melodic version log, help, and checksum"

# Use the Wishart-based dim estimate instead of the melodic-based estimate (--dim=${Dim})
# Also turn off melodic VN and feed in the input that has already been VN'ed instead (--vn flag, which turns OFF melodic's vn)
# Added "-m ${concatfmri}_brain_mask" to avoid memory issue - Takuya Hayahsi July 2018
melodic_cmd=("${MELODIC}" -i "${concatfmrihp}_vnts" -o "${concatfmrihp}.ica/filtered_func_data.ica" --nobet --report --Oall --tr="${tr}" --vn --dim="${Dim}" -m "${concatfmri}_brain_mask")
if [ ! -z "${log_debugOn}" ] ; then
	melodic_cmd+=(--verbose --debug)
fi

#keep the existing handling code for melodic errors?
debug_disable_trap

log_Msg "melodic_cmd: ${melodic_cmd[*]}"
"${melodic_cmd[@]}"
return_code=$?
log_Msg "melodic has been run: return_code = ${return_code}"
log_Debug_Msg "melodic has been run: Contents of ${concatfmrihp}.ica follow"
if [ ! -z "${log_debugOn}" ] ; then
	ls -lRa ${concatfmrihp}.ica
fi

if [ "${return_code}" -ne "0" ] ; then
	log_Err_Abort "melodic has returned a non-zero code"
fi

debug_enable_trap

# At this point (following melodic), ${concatfmrihp}_vnts is no longer necessary
$FSLDIR/bin/imrm ${concatfmrihp}_vnts

# Delete some time series, resulting from the '--Oall' option in melodic, that aren't needed
# (these may only get created in the context of MIGP)
$FSLDIR/bin/imrm ${concatfmrihp}.ica/filtered_func_data.ica/alldat
$FSLDIR/bin/imrm ${concatfmrihp}.ica/filtered_func_data.ica/concat_data

## ---------------------------------------------------------------------------
## Housekeeping related to files expected for FIX
## ---------------------------------------------------------------------------

cd "${concatfmrihp}.ica"

# This is the concated volume time series from the 1st pass VN, with requested
# hp-filtering applied and with the mean VN map multiplied back in
$FSLDIR/bin/imln ../${concatfmrihp} filtered_func_data

# This is the concated CIFTI time series from the 1st pass VN, with requested
# hp-filtering applied and with the mean VN map multiplied back in
# Unlike 'hcp_fix' (single-run), here we symlink to the hp-filtered CIFTI and
# use "AlreadyHP=-1" to skip any additional filtering in fix_3_clean.
if [ -f ../${concatfmri}_Atlas_hp${hp}.dtseries.nii ] ; then
	$FSLDIR/bin/imln ../${concatfmri}_Atlas_hp${hp}.dtseries.nii Atlas.dtseries.nii
fi

# Other necessary files (N.B. Movement regressors already prep'ed above)
$FSLDIR/bin/imln filtered_func_data.ica/mask mask
if [ `$FSLDIR/bin/imtest ../${concatfmri}_SBRef` = 1 ] ; then
	$FSLDIR/bin/imln ../${concatfmri}_SBRef mean_func
else
	$FSLDIR/bin/imln filtered_func_data.ica/mean mean_func
fi

mkdir -p reg
cd reg

i_am_at=`pwd`
log_Debug_Msg "current folder ${i_am_at}"

$FSLDIR/bin/imln ../../../../T1w_restore_brain highres
$FSLDIR/bin/imln ../../../../wmparc wmparc
$FSLDIR/bin/imln ../mean_func example_func
$FSLDIR/bin/makerot --theta=0 > highres2example_func.mat
if [ `$FSLDIR/bin/imtest ../../../../T2w` = 1 ] ; then
	$FSLDIR/bin/fslmaths ../../../../T1w -div ../../../../T2w veins -odt float
	$FSLDIR/bin/flirt -in ../../../../brainmask_fs -ref veins -out veinbrainmask -applyxfm
	$FSLDIR/bin/fslmaths veinbrainmask -bin veinbrainmask
	$FSLDIR/bin/fslmaths veins -div `$FSLDIR/bin/fslstats veins -k veinbrainmask -P 50` -mul 2.18 -thr 10 -min 50 -div 50 veins
	$FSLDIR/bin/flirt -in veins -ref example_func -applyxfm -init highres2example_func.mat -out veins_exf
	$FSLDIR/bin/fslmaths veins_exf -mas example_func veins_exf
fi

# Return to ${ConcatFolder}
# Do not use 'cd ${ConcatFolder}', because ${ConcatFolder} may not be an absolute path
cd ../..

## ---------------------------------------------------------------------------
## Actually run FIX
## ---------------------------------------------------------------------------

log_Msg "Running FIX"

# Changes to handle user specified training data file
if [[ "${TrainingData}" != "" ]]; then
	# User has specified a training data file
	
	# add .RData suffix if not already there
	if [[ "${TrainingData}" != *.RData ]]; then 
		TrainingData=${TrainingData}.RData
	fi
	
	# if the specified TrainingData is not a full path to an existing file,
	# assume that the user is specifying the name of a file in the training_files folder in FSL_FIXDIR
	if [ ! -f "${TrainingData}" ]; then 
		TrainingData=${FSL_FIXDIR}/training_files/${TrainingData}
	fi
	
	# finally, if the TrainingData file is not found, report an error and get out of here
	if [[ ! -f "${TrainingData}" ]]; then
		log_Err_Abort "FIX training data not found: ${TrainingData}"
	fi
else
	# User has not specified a training data file
	log_Msg "training data file not specified"
	TrainingData="${FSL_FIXDIR}"/training_files/HCP_Style_Single_Multirun_Dedrift.RData
	if [[ ! -f "$TrainingData" ]]; then
		log_Err_Abort "default training file '$TrainingData' not found, please update your fix installation"
	fi
fi

log_Msg "using training data file: ${TrainingData}"

# set up fix command
# use array for whitespace safety, even if the rest of the script isn't
if ((doMotionRegression)); then
	fix_cmd=("${FSL_FIXDIR}/fix" "${concatfmrihp}.ica" "${TrainingData}" "${FixThresh}" -m -h "${AlreadyHP}")
else
	#-h is actually a subargument to -m, and will cause problems if specified without (or even not directly following) -m
	# Update (11/8/2019): No longer true as of FIX 1.06.12, but since filtering of the CIFTI in MR-FIX occurs in
	# functionhighpassandvariancenormalize it doesn't matter, so we leave the code unchanged so that we don't
	# need to add a FIX version dependency to the script
	fix_cmd=("${FSL_FIXDIR}/fix" "${concatfmrihp}.ica" "${TrainingData}" "${FixThresh}")
fi
log_Msg "fix_cmd: ${fix_cmd[*]}"
## MPH: The 'fix' script itself will continue to log to its own custom files
## Alert user to where those are
log_Msg "Check ${concatfmrihp}.ica/fix/logMatlab.txt for log output from feature extraction"
log_Msg "Check ${concatfmrihp}.ica/.fix_2b_predict.log for log output from component classification"
log_Msg "Check ${concatfmrihp}.ica/.fix.log for log output from cleanup stage"
"${fix_cmd[@]}"
return_code=$?
if [ "${return_code}" -ne "0" ]; then
	log_Err_Abort "return_code from fix_cmd: ${return_code}"
fi
	
log_Msg "Done running FIX"

## ---------------------------------------------------------------------------
## Rename some files (relative to the default names coded in fix_3_clean)
## ---------------------------------------------------------------------------

$FSLDIR/bin/immv ${concatfmrihp}.ica/filtered_func_data_clean ${concatfmrihp}_clean
if [ "$?" -ne "0" ]; then
	log_Err_Abort "Something went wrong; ${concatfmrihp}.ica/filtered_func_data_clean wasn't created"
fi
if [ -f ${concatfmrihp}.ica/Atlas_clean.dtseries.nii ]; then
	/bin/mv ${concatfmrihp}.ica/Atlas_clean.dtseries.nii ${concatfmri}_Atlas_hp${hp}_clean.dtseries.nii
else
	log_Err_Abort "Something went wrong; ${concatfmrihp}.ica/Atlas_clean.dtseries.nii wasn't created"
fi

# The variance normalization ("_vn") outputs of fix (fix_3_clean) require use of fix1.067 or later
# So check whether those files exist before moving/renaming them
if [ `$FSLDIR/bin/imtest ${concatfmrihp}.ica/filtered_func_data_clean_vn` = 1 ]; then
	$FSLDIR/bin/immv ${concatfmrihp}.ica/filtered_func_data_clean_vn ${concatfmrihp}_clean_vn
fi
if [ -f ${concatfmrihp}.ica/Atlas_clean_vn.dscalar.nii ]; then
	/bin/mv ${concatfmrihp}.ica/Atlas_clean_vn.dscalar.nii ${concatfmri}_Atlas_hp${hp}_clean_vn.dscalar.nii
fi
log_Msg "Done renaming files"

# Remove the 'fake-NIFTI' file created in fix_3_clean for high-pass filtering of the CIFTI (if it exists)
$FSLDIR/bin/imrm ${concatfmrihp}.ica/Atlas

# Always delete things with too-generic names
$FSLDIR/bin/imrm ${concatfmrihp}.ica/filtered_func_data
rm -f ${concatfmrihp}.ica/Atlas.dtseries.nii

# Optional deletion of highpass intermediates
# (hp<0 not supported in this script currently, so no need to condition on value of hp)
if ((DeleteIntermediates))
then
	$FSLDIR/bin/imrm ${concatfmri} ${concatfmrihp}
	rm -f ${concatfmri}_Atlas.dtseries.nii ${concatfmri}_Atlas_hp${hp}.dtseries.nii
fi

# Convert sICA+FIX cleaned movement regressors to text
if [ -f ${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz ] ; then
  fslmeants -i ${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz -o Movement_Regressors_hp${hp}_clean.txt --showall
  # Strip header lines included as part of '--showall' flag
  nVols=$($FSLDIR/bin/fslnvols ${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz)
  # Execute tail in a subshell, so we can successfully overwrite file with same name
  echo "$(tail -n ${nVols} Movement_Regressors_hp${hp}_clean.txt)" > Movement_Regressors_hp${hp}_clean.txt
fi

## ---------------------------------------------------------------------------
## Split the cleaned volume and CIFTI back into individual runs.
## ---------------------------------------------------------------------------

## The cleaned volume and CIFTI have no mean.
## The time series of the individual runs were variance normalized via the 1st pass through functionhighpassandvariancenormalize.
## The mean VN map (across runs) was then multiplied into the concatenated time series, and that became the input to FIX.
## We now reverse that process.
## i.e., the mean VN (across runs) is divided back out, and the VN map for the individual run multiplied back in.
## Then the mean is added back in to return the timeseries to its original state minus the noise (as estimated by FIX).

cd "${DIR}"  # Return to directory where script was launched (in case inputs used relative paths)

log_Msg "Splitting cifti and nifti back into individual runs"
Start="1"
for fmri in "${fmris[@]}" ; do
	fmriNoExt=$($FSLDIR/bin/remove_ext $fmri)  # $fmriNoExt still includes leading directory components
	NumTPS=`${Caret7_Command} -file-information ${fmriNoExt}_Atlas.dtseries.nii -no-map-info -only-number-of-maps`
	Stop=`echo "${NumTPS} + ${Start} -1" | bc -l`
	log_Msg "${fmriNoExt}: Start=${Start} Stop=${Stop}"
	
	cifti_out=${fmriNoExt}_Atlas_hp${hp}_clean.dtseries.nii
	${Caret7_Command} -cifti-merge ${cifti_out} -cifti ${ConcatFolder}/${concatfmri}_Atlas_hp${hp}_clean.dtseries.nii -column ${Start} -up-to ${Stop}
	${Caret7_Command} -cifti-math "((TCS / VNA) * VN) + Mean" ${cifti_out} -var TCS ${cifti_out} -var VNA ${ConcatFolder}/${concatfmri}_Atlas_hp${hp}_vn.dscalar.nii -select 1 1 -repeat -var VN ${fmriNoExt}_Atlas_hp${hp}_vn.dscalar.nii -select 1 1 -repeat -var Mean ${fmriNoExt}_Atlas_mean.dscalar.nii -select 1 1 -repeat

	readme_for_cifti_out=${cifti_out%.dtseries.nii}.README.txt
	touch ${readme_for_cifti_out}
	short_cifti_out=${cifti_out##*/}
	# MPH: Overwrite file, if it already exists
	echo "${short_cifti_out} was generated by applying \"multi-run FIX\" (using '${g_script_name}')" >| ${readme_for_cifti_out}
	echo "across the following individual runs:" >> ${readme_for_cifti_out}
	for readme_fmri in "${fmris[@]}" ; do
		echo "  ${readme_fmri}" >> ${readme_for_cifti_out}
	done

	volume_out=${fmriNoExt}_hp${hp}_clean.nii.gz
	${Caret7_Command} -volume-merge ${volume_out} -volume ${ConcatFolder}/${concatfmrihp}_clean.nii.gz -subvolume ${Start} -up-to ${Stop}
	fslmaths ${volume_out} -div ${ConcatFolder}/${concatfmrihp}_vn -mul ${fmriNoExt}_hp${hp}_vn -add ${fmriNoExt}_mean ${volume_out}

  # Convert sICA+FIX cleaned movement regressors to text
	if [ -f ${ConcatFolder}/${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz ] ; then
		${Caret7_Command} -volume-merge ${fmriNoExt}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz -volume ${ConcatFolder}/${concatfmrihp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz -subvolume ${Start} -up-to ${Stop}
		fmriDir=$(dirname $fmri)
		fslmeants -i ${fmriNoExt}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz -o ${fmriDir}/Movement_Regressors_hp${hp}_clean.txt --showall
		# Strip header lines included as part of '--showall' flag
		nVols=$($FSLDIR/bin/fslnvols ${fmriNoExt}_hp${hp}.ica/mc/prefiltered_func_data_mcf_conf_hp_clean.nii.gz)
		# Execute tail in a subshell, so we can successfully overwrite file with same name
		echo "$(tail -n ${nVols} ${fmriDir}/Movement_Regressors_hp${hp}_clean.txt)" > ${fmriDir}/Movement_Regressors_hp${hp}_clean.txt
	fi

	Start=`echo "${Start} + ${NumTPS}" | bc -l`
done

cd "${DIR}"

log_Msg "Completed!"

#!/bin/bash

#~ND~FORMAT~MARKDOWN~
#~ND~START~
#
# # PostFix.sh
#
# ## Copyright Notice
#
# Copyright (C) 2015-2017 The Human Connectome Project
#
# * Washington University in St. Louis
# * University of Minnesota
# * Oxford University
#
# ## Author(s)
#
# * Matthew F. Glasser, Department of Anatomy and Neurobiology, Washington University in St. Louis
# * Timothy B. Brown, Neuroinformatics Research Group, Washington University in St. Louis
#
# ## Product
#
# [Human Connectome Project][HCP] (HCP) Pipelines
#
# ## License
#
# See the [LICENSE](https://github.com/Washington-Univesity/Pipelines/blob/master/LICENSE.md) file
#
# <!-- References -->
# [HCP]: http://www.humanconnectome.org
#
#~ND~END~

# ------------------------------------------------------------------------------
#  Show usage information for this script
# ------------------------------------------------------------------------------

set -eu

pipedirguessed=0
if [[ "${HCPPIPEDIR:-}" == "" ]]
then
    pipedirguessed=1
    #fix this if the script is more than one level below HCPPIPEDIR
    export HCPPIPEDIR="$(dirname -- "$0")/.."
fi


# Load function libraries
source "${HCPPIPEDIR}/global/scripts/fsl_version.shlib"        # Functions for getting FSL version
source "${HCPPIPEDIR}/global/scripts/debug.shlib" "$@"         # Debugging functions; also sources log.shlib
source "$HCPPIPEDIR/global/scripts/newopts.shlib" "$@"

opts_SetScriptDescription "Creates Workbench scene files that can be used to visually review the signal vs. noise classification generated by ICA+FIX."

opts_AddMandatory '--study-folder' 'StudyFolder' 'path' "path to study folder" '--path'

opts_AddMandatory '--subject' 'Subject' 'id' "subject ID"

opts_AddMandatory '--fmri-name' 'fMRIName' 'string' "In the case of applying PostFix to the output of multi-run FIX, <fMRI name> should be the <concat_name> used in multi-run FIX."

opts_AddMandatory '--high-pass' 'HighPass' 'number' "high-pass filter used in ICA+FIX"

opts_AddMandatory '--template-scene-dual-screen' 'TemplateSceneDualScreen' 'path' "template scene file"

opts_AddMandatory '--template-scene-single-screen' 'TemplateSceneSingleScreen' 'path' "template scene file"

opts_AddMandatory '--reuse-high-pass' 'ReuseHighPass' 'YES or NO' "Use an existing file that has already been high-pass filtered"

##Optional Args
opts_AddOptional '--matlab-run-mode' 'MatlabRunMode' '0, 1, 2' "defaults to 1
     0 = Use compiled MATLAB
     1 = Use interpreted MATLAB
     2 = Use octave" "1"

opts_ParseArguments "$@"

if ((pipedirguessed))
then
    log_Err_Abort "HCPPIPEDIR is not set, you must first source your edited copy of Examples/Scripts/SetUpHCPPipeline.sh"
fi

#display the parsed/default values
opts_ShowValues

log_Check_Env_Var CARET7DIR
log_Check_Env_Var FSLDIR

ReuseHighPass=$(opts_StringToBool "$ReuseHighPass")

# Show HCP pipelines version
log_Msg "Showing HCP Pipelines version"
"${HCPPIPEDIR}"/show_version --short

# Show wb_command version
log_Msg "Showing wb_command version"
${CARET7DIR}/wb_command -version

# Show FSL version
log_Msg "Showing FSL version"
fsl_version_get fsl_ver
log_Msg "FSL version: ${fsl_ver}"

case ${MatlabRunMode} in
	0)
		log_Msg "MATLAB Run Mode: ${MatlabRunMode}"
		if [ -z "${MATLAB_COMPILER_RUNTIME}" ]; then
			log_Err_Abort "To use MATLAB run mode: ${MatlabRunMode}, the MATLAB_COMPILER_RUNTIME environment variable must be set"
		else
			log_Msg "MATLAB_COMPILER_RUNTIME: ${MATLAB_COMPILER_RUNTIME}"
		fi
		;;
	1 | 2)
		log_Msg "MATLAB Run Mode: ${MatlabRunMode}"
		;;
	*)
		log_Err_Abort "MATLAB Run Mode value must be 0, 1 or 2"
		error_count=$(( error_count + 1 ))
		;;
esac

# ------------------------------------------------------------------------------
#  Create symlinks, but only if file doesn't already exist in ResultsFolder
# ------------------------------------------------------------------------------

create_symlink_if_appropriate() {
    
    local file="${1}"
    local ResultsFolder="${2}"
    local FIXFolder="${3}"
    local DIR

    if [[ -e ${ResultsFolder}/${file} && ! -L ${ResultsFolder}/${file} ]]; then
	log_Warn "Script now creates ${file} in ${FIXFolder}"
	log_Warn "NOT creating a symlink from ${ResultsFolder}, because ${file} already exists there"
	log_Warn "Be careful in any future use that you are using the version of ${file} corresponding to the intended high-pass filter!"
    else
	# Need to force the symlink (-f) in case one already exists
	# Make sure to create the symlink as a relative path!
	DIR=$(pwd)
	cd ${ResultsFolder}
	ln -sf $(basename "${FIXFolder}")/${file}
	cd ${DIR}
    fi
}

# ------------------------------------------------------------------------------
#  Main processing of script.
# ------------------------------------------------------------------------------

this_script_dir=$(readlink -f "$(dirname "$0")")

log_Msg "main functionality begin"

# NOTE: HighPass flag may be "pd*", if polynomial detrending was requested in 
# hcp_fix_multi_run (not supported in hcp_fix currently)

# Polynomial detrending is not supported in prepareICAs.m currently
# Must use an already existing hp'ed time-series in that case
if [[ "${HighPass}" == pd* ]] && ! ((ReuseHighPass)); then
	log_Err_Abort "If using polynomial detrending, must use an already existing high-passed time-series (i.e., --reuse-high-pass must be set to YES)"
fi

if [[ "${HighPass}" == pd* ]]; then
	hpNum=${HighPass:2}
else
	hpNum=${HighPass}
fi

# Confirm that $hpNum is a valid numeric
if ! [[ "${hpNum}" =~ ^[-]?[0-9]+$ ]]; then
	log_Err_Abort "Invalid value for --high-pass (${HighPass})"
fi

# If HighPass < 0, then no high-pass was applied and directories/filenames
# will not include an "_hp" string
if (( hpNum < 0 )); then
	hpStr=""
else
	hpStr="_hp${HighPass}"
fi

# Naming Conventions and other variables
AtlasFolder="${StudyFolder}/${Subject}/MNINonLinear"
log_Msg "AtlasFolder: ${AtlasFolder}"

ResultsFolder="${AtlasFolder}/Results/${fMRIName}"
log_Msg "ResultsFolder: ${ResultsFolder}"

ICAFolder="${ResultsFolder}/${fMRIName}${hpStr}.ica/filtered_func_data.ica"
log_Msg "ICAFolder: ${ICAFolder}"

FIXFolder="${ResultsFolder}/${fMRIName}${hpStr}.ica"
log_Msg "FIXFolder: ${FIXFolder}"

log_Msg "Creating ${ICAFolder}/ICAVolumeSpace.txt file"
echo "OTHER" > "${ICAFolder}/ICAVolumeSpace.txt"
echo "1 255 255 255 255" >> "${ICAFolder}/ICAVolumeSpace.txt"

log_Msg "Creating ${ICAFolder}/mask.nii.gz"
${FSLDIR}/bin/fslmaths ${ICAFolder}/melodic_oIC.nii.gz -Tstd -bin ${ICAFolder}/mask.nii.gz

${CARET7DIR}/wb_command -volume-label-import ${ICAFolder}/mask.nii.gz ${ICAFolder}/ICAVolumeSpace.txt ${ICAFolder}/mask.nii.gz

log_Msg "Creating dense timeseries from melodic volume maps"
${CARET7DIR}/wb_command -cifti-create-dense-timeseries ${ICAFolder}/melodic_oIC_vol.dtseries.nii -volume ${ICAFolder}/melodic_oIC.nii.gz ${ICAFolder}/mask.nii.gz -timestep 1 -timestart 1

## Prep variables for prepareICAs
log_Msg "Set up for prepareICAs MATLAB code"
HighPassUse=""
if ((ReuseHighPass)) ; then
	dtseriesName="${ResultsFolder}/${fMRIName}_Atlas${hpStr}" #No Extension Here
	log_Msg "dtseriesName: ${dtseriesName}"
	HighPassUse="-1"
else
	dtseriesName="${ResultsFolder}/${fMRIName}_Atlas" #No Extension Here
	log_Msg "dtseriesName: ${dtseriesName}"
	HighPassUse="${HighPass}"
fi

# Confirm that $HighPassUse is a valid numeric at this point
if ! [[ "${HighPassUse}" =~ ^[-]?[0-9]+$ ]]; then
	log_Err_Abort "Invalid value for --high-pass (${HighPass})"
fi

ICAs="${ICAFolder}/melodic_mix"  # Input to prepareICAs
log_Msg "ICAs: ${ICAs}"

ICAdtseries="${ICAFolder}/melodic_oIC.dtseries.nii"  # Output of prepareICAs
log_Msg "ICAdtseries: ${ICAdtseries}"

NoiseICAs="${FIXFolder}/.fix"  # Input to prepareICAs
log_Msg "NoiseICAs: ${NoiseICAs}"

Noise="${FIXFolder}/Noise.txt"  # Output of prepareICAs
log_Msg "Noise: ${Noise}"

Signal="${FIXFolder}/Signal.txt"  # Output of prepareICAs
log_Msg "Signal: ${Signal}"

ComponentList="${FIXFolder}/ComponentList.txt"  # Output of prepareICAs
log_Msg "ComponentList: ${ComponentList}"

TR=$(${FSLDIR}/bin/fslval ${ResultsFolder}/${fMRIName}${hpStr}_clean pixdim4)  # Input to prepareICAs
log_Msg "TR: ${TR}"

if [ -e ${ComponentList} ] ; then  # Output of prepareICAs
	log_Msg "Removing ComponentList: ${ComponentList}"
	rm ${ComponentList}
fi

# For interpreted modes, make sure that matlab/octave have access to the functions they need
export FSL_MATLAB_PATH="${FSLDIR}/etc/matlab"
ML_PATHS="addpath('${FSL_MATLAB_PATH}'); addpath('$HCPCIFTIRWDIR'); addpath('${HCPPIPEDIR}/global/matlab'); addpath('${this_script_dir}/scripts');"

# run MATLAB prepareICAs function
case ${MatlabRunMode} in

	0)
		# Use Compiled Matlab
		matlab_exe="${HCPPIPEDIR}/ICAFIX/scripts/Compiled_prepareICAs/run_prepareICAs.sh"
		
		# Do NOT enclose string variables inside an additional single quote because all
		# variables are already passed into the compiled binary as strings
		matlab_function_arguments=("${dtseriesName}" "${ICAs}" "${CARET7DIR}/wb_command")
		matlab_function_arguments+=("${ICAdtseries}" "${NoiseICAs}" "${Noise}")
		matlab_function_arguments+=("${Signal}" "${ComponentList}" "${HighPassUse}")
		matlab_function_arguments+=("${TR}")

		matlab_cmd=("${matlab_exe}" "${MATLAB_COMPILER_RUNTIME}" "${matlab_function_arguments[@]}")

		# redirect tokens must be parsed by bash before doing variable expansion, and thus can't be inside a variable
		# MPH: Going to let Compiled MATLAB use the existing stdout and stderr, rather than creating a separate log file
		#local matlab_logfile="${FIXFolder}/.postfix.${fMRIName}.prepareICAs.matlab.log"
		#log_Msg "Run MATLAB command: ${matlab_cmd[*]} >> ${matlab_logfile} 2>&1"
		#"${matlab_cmd[@]}" >> "${matlab_logfile}" 2>&1
		log_Msg "Run compiled MATLAB: ${matlab_cmd[*]}"
		"${matlab_cmd[@]}"
		log_Msg "Compiled MATLAB return code $?"
		;;

	1 | 2)
		# Use interpreted MATLAB or Octave
		if [[ ${MatlabRunMode} == '1' ]]; then
			interpreter=(matlab -nojvm -nodisplay -nosplash)
		else
			interpreter=(octave -q --no-window-system)
		fi

		matlab_cmd="${ML_PATHS} prepareICAs('${dtseriesName}','${ICAs}','${CARET7DIR}/wb_command','${ICAdtseries}','${NoiseICAs}','${Noise}','${Signal}','${ComponentList}',${HighPassUse},${TR});"
		
		log_Msg "Run interpreted MATLAB/Octave (${interpreter[@]}) with command..."
		log_Msg "${matlab_cmd}"

		# Use bash redirection ("here-string") to pass multiple commands into matlab
		# (Necessary to protect the semicolons that separate matlab commands, which would otherwise
		# get interpreted as separating different bash shell commands)
		"${interpreter[@]}" <<<"${matlab_cmd}"

		log_Msg "Interpreted MATLAB/Octave return code: $?"
		;;
	
	*)
		log_Err_Abort "Unrecognized MATLAB run mode value: ${MatlabRunMode}"
		;;
esac

# N.B. ${ComponentList} doesn't exist until after prepareICAs
# If it doesn't exist at this point, we should abort
if [ ! -e ${ComponentList} ] ; then
	log_Err_Abort "ComponentList (${ComponentList}) does not exist"
fi

log_Msg "Convert melodic volume maps to dscalar. Output ${ICAFolder}/melodic_oIC_vol.dscalar.nii"
${CARET7DIR}/wb_command -cifti-convert-to-scalar ${ICAFolder}/melodic_oIC_vol.dtseries.nii ROW ${ICAFolder}/melodic_oIC_vol.dscalar.nii -name-file ${ComponentList}

log_Msg "Convert melodic cifti maps to dscalar. Output ${ICAFolder}/melodic_oIC.dscalar.nii"
${CARET7DIR}/wb_command -cifti-convert-to-scalar ${ICAFolder}/melodic_oIC.dtseries.nii ROW ${ICAFolder}/melodic_oIC.dscalar.nii -name-file ${ComponentList}

# Remove the intermediate .dtseries versions of the melodic maps
rm ${ICAFolder}/melodic_oIC_vol.dtseries.nii ${ICAFolder}/melodic_oIC.dtseries.nii

log_Msg "Create scalar series of ICA timecourses"
${CARET7DIR}/wb_command -cifti-create-scalar-series ${ICAs} ${ICAs}.sdseries.nii -transpose -name-file ${ComponentList} -series SECOND 0 ${TR}

# TimC: step=1/length-of-time-course-in-seconds=1/NumTimePoints*TR
NumTimePoints=$(${FSLDIR}/bin/fslval ${ResultsFolder}/${fMRIName}${hpStr}_clean dim4)
log_Msg "NumTimePoints: ${NumTimePoints}"
FTmixStep=$(echo "scale=7 ; 1/(${NumTimePoints}*${TR})" | bc -l)
log_Msg "FTmixStep: ${FTmixStep}"
${CARET7DIR}/wb_command -cifti-create-scalar-series ${ICAFolder}/melodic_FTmix ${ICAFolder}/melodic_FTmix.sdseries.nii -transpose -name-file ${ComponentList} -series HERTZ 0 ${FTmixStep}
rm ${ComponentList}

# 1/28/2019, MPH: Going to place the ReclassifyAs*.txt files into FIXFolder
# to avoid name collision if user runs FIX with a different highpass filter.
# But then symlink to them from ResultsFolder for compatibility with previous code and downstream scripts
# The .scene files need to stay in ResultsFolder (so the paths to the files still work), but
# we'll add the highpass filter to the file name.
if [ ! -e ${FIXFolder}/ReclassifyAsSignal.txt ] ; then
	touch ${FIXFolder}/ReclassifyAsSignal.txt
fi

if [ ! -e ${FIXFolder}/ReclassifyAsNoise.txt ] ; then
	touch ${FIXFolder}/ReclassifyAsNoise.txt
fi

log_Msg "Making dual screen scene"
sceneFileDual=${ResultsFolder}/${Subject}_${fMRIName}${hpStr}_ICA_Classification_dualscreen.scene
# MPH: Overwrite file, if it already exists
cat "${TemplateSceneDualScreen}" | sed s/SubjectID/${Subject}/g | sed s/fMRIName/${fMRIName}/g | sed s@StudyFolder@"../../../.."@g | sed s@_hpHighPass@${hpStr}@g >| "${sceneFileDual}"
#TSC: run it through workbench to simplify excessive ".."s in paths
"$CARET7DIR"/wb_command -scene-file-relocate "$sceneFileDual" "$sceneFileDual"

log_Msg "Making single screen scene"
sceneFileSingle=${ResultsFolder}/${Subject}_${fMRIName}${hpStr}_ICA_Classification_singlescreen.scene
# MPH: Overwrite file, if it already exists
cat "${TemplateSceneSingleScreen}" | sed s/SubjectID/${Subject}/g | sed s/fMRIName/${fMRIName}/g | sed s@StudyFolder@"../../../.."@g | sed s@_hpHighPass@${hpStr}@g >| "${sceneFileSingle}"
#TSC: run it through workbench to simplify excessive ".."s in paths
"$CARET7DIR"/wb_command -scene-file-relocate "$sceneFileSingle" "$sceneFileSingle"

# For legacy compatibility, we symlink the ReclassifyAs*.txt files into ResultsFolder.
# If ReclassifyAs*.txt files already exist in ResultsFolder, then those
# need to be preserved (but with a warning generated)!
# If file exists as a symlink, force creation of a new symlink pointing to the FIXFolder files
file=ReclassifyAsSignal.txt
create_symlink_if_appropriate "${file}" "${ResultsFolder}" "${FIXFolder}"
file=ReclassifyAsNoise.txt
create_symlink_if_appropriate "${file}" "${ResultsFolder}" "${FIXFolder}"

log_Msg "Completed!"

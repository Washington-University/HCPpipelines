#!/bin/bash

#~ND~FORMAT~MARKDOWN~
#~ND~START~
#
# # PostFix.sh
#
# ## Copyright Notice
#
# Copyright (C) 2015-2017 The Human Connectome Project
#
# * Washington University in St. Louis
# * University of Minnesota
# * Oxford University
#
# ## Author(s)
#
# * Matthew F. Glasser, Department of Anatomy and Neurobiology, Washington University in St. Louis
# * Timothy B. Brown, Neuroinformatics Research Group, Washington University in St. Louis
#
# ## Product
#
# [Human Connectome Project][HCP] (HCP) Pipelines
#
# ## License
#
# See the [LICENSE](https://github.com/Washington-Univesity/Pipelines/blob/master/LICENSE.md) file
#
# <!-- References -->
# [HCP]: http://www.humanconnectome.org
#
#~ND~END~

# ------------------------------------------------------------------------------
#  Show usage information for this script
# ------------------------------------------------------------------------------

show_usage()
{
	cat <<EOF

${g_script_name}: Creates Workbench scene files that can be used to visually review
the signal vs. noise classification generated by ICA+FIX.

Usage: ${g_script_name} PARAMETER...

PARAMETERs are [ ] = optional; < > = user supplied value

  [--help] : show usage information and exit
   --path=<path to study folder> OR --study-folder=<path to study folder>
   --subject=<subject ID>
   --fmri-name=<fMRI name>
              In the case of applying PostFix to the output of multi-run FIX,
              <fMRI name> should be the <concat_name> used in multi-run FIX.
   --high-pass=<high-pass filter used in ICA+FIX>
   --template-scene-dual-screen=<template scene file>
   --template-scene-single-screen=<template scene file>
   --reuse-high-pass=<YES | NO>
   [--matlab-run-mode={0, 1, 2}] defaults to ${G_DEFAULT_MATLAB_RUN_MODE}
     0 = Use compiled MATLAB
     1 = Use interpreted MATLAB
     2 = Use octave

EOF
}

# ------------------------------------------------------------------------------
#  Get the command line options for this script.
# ------------------------------------------------------------------------------

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset p_StudyFolder
	unset p_Subject
	unset p_fMRIName
	unset p_HighPass
	unset p_TemplateSceneDualScreen
	unset p_TemplateSceneSingleScreen
	unset p_ReuseHighPass
	unset p_MatlabRunMode

	# set default values
	p_MatlabRunMode=${G_DEFAULT_MATLAB_RUN_MODE}

	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--help)
				show_usage
				exit 0
				;;
			--path=*)
				p_StudyFolder=${argument#*=}
				index=$(( index + 1 ))
				;;
			--study-folder=*)
				p_StudyFolder=${argument#*=}
				index=$(( index + 1 ))
				;;
			--subject=*)
				p_Subject=${argument#*=}
				index=$(( index + 1 ))
				;;
			--fmri-name=*)
				p_fMRIName=${argument#*=}
				index=$(( index + 1 ))
				;;
			--high-pass=*)
				p_HighPass=${argument#*=}
				index=$(( index + 1 ))
				;;
			--template-scene-dual-screen=*)
				p_TemplateSceneDualScreen=${argument#*=}
				index=$(( index + 1 ))
				;;
			--template-scene-single-screen=*)
				p_TemplateSceneSingleScreen=${argument#*=}
				index=$(( index + 1 ))
				;;
			--reuse-high-pass=*)
				p_ReuseHighPass=${argument#*=}
				index=$(( index + 1 ))
				;;
			--matlab-run-mode=*)
				p_MatlabRunMode=${argument#*=}
				index=$(( index + 1 ))
				;;
			*)
				show_usage
				log_Err_Abort "unrecognized option: ${argument}"
				;;
		esac
	done

	local error_count=0

	# check required parameters
	if [ -z "${p_StudyFolder}" ]; then
		log_Err "Study Folder (--path= or --study-folder=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "Study Folder: ${p_StudyFolder}"
	fi

	if [ -z "${p_Subject}" ]; then
		log_Err "Subject ID (--subject=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "Subject ID: ${p_Subject}"
	fi

	if [ -z "${p_fMRIName}" ]; then
		log_Err "fMRI Name (--fmri-name=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "fMRI Name: ${p_fMRIName}"
	fi

	if [ -z "${p_HighPass}" ]; then
		log_Err "High Pass: (--high-pass=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "High Pass: ${p_HighPass}"
	fi

	if [ -z "${p_TemplateSceneDualScreen}" ]; then
		log_Err "Dual Screen Template Scene (--template-scene-dual-screen=)required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "Dual Screen Template Scene: ${p_TemplateSceneDualScreen}"
	fi

	if [ -z "${p_TemplateSceneSingleScreen}" ]; then
		log_Err "Single Screen Template Scene (--template-scene-single-screen=) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "Single Screen Template Scene: ${p_TemplateSceneSingleScreen}"
	fi

	if [ -z "${p_ReuseHighPass}" ]; then
		log_Err "Reuse High Pass (--reuse-high-pass=<YES | NO>) required"
		error_count=$(( error_count + 1 ))
	else
		log_Msg "Reuse High Pass: ${p_ReuseHighPass}"
	fi

	if [ -z "${p_MatlabRunMode}" ]; then
		log_Err "MATLAB Run Mode (--matlab-run-mode=) required"
		error_count=$(( error_count + 1 ))
	else
		case ${p_MatlabRunMode} in
			0)
				log_Msg "MATLAB Run Mode: ${p_MatlabRunMode}"
				if [ -z "${MATLAB_COMPILER_RUNTIME}" ]; then
					log_Err_Abort "To use MATLAB run mode: ${p_MatlabRunMode}, the MATLAB_COMPILER_RUNTIME environment variable must be set"
				else
					log_Msg "MATLAB_COMPILER_RUNTIME: ${MATLAB_COMPILER_RUNTIME}"
				fi
				;;
			1 | 2)
				log_Msg "MATLAB Run Mode: ${p_MatlabRunMode}"
				# ${MATLAB_GIFTI_LIB} should contain the cifti{open,save,savereset}.m functions AND
				# the definition of the gifti class (i.e., the '@gifti' directory (or a symlink to it)
				# from the GIfTI library (https://www.artefact.tk/software/matlab/gifti)
				# If not defined in the environment, we'll use what is provided within the HCPpipelines
				if [ -z "${MATLAB_GIFTI_LIB}" ]; then
					MATLAB_GIFTI_LIB=${HCPPIPEDIR}/global/matlab
					#log_Err_Abort "To use MATLAB run mode: ${p_MatlabRunMode}, the MATLAB_GIFTI_LIB environment variable must be set"
				fi
				log_Msg "MATLAB_GIFTI_LIB: ${MATLAB_GIFTI_LIB}"
				;;
			*)
				log_Err_Abort "MATLAB Run Mode value must be 0, 1 or 2"
				error_count=$(( error_count + 1 ))
				;;
		esac
	fi

	if [ ${error_count} -gt 0 ]; then
		log_Err_Abort "For usage information, use --help"
	fi
}

# ------------------------------------------------------------------------------
#  Show Tool Versions
# ------------------------------------------------------------------------------

show_tool_versions() {
	# Show HCP pipelines version
	log_Msg "Showing HCP Pipelines version"
	cat ${HCPPIPEDIR}/version.txt

	# Show wb_command version
	log_Msg "Showing wb_command version"
	${CARET7DIR}/wb_command -version

	# Show FSL version
	log_Msg "Showing FSL version"
	fsl_version_get fsl_ver
	log_Msg "FSL version: ${fsl_ver}"
}

# ------------------------------------------------------------------------------
#  Create symlinks, but only if file doesn't already exist in ResultsFolder
# ------------------------------------------------------------------------------

create_symlink_if_appropriate() {
    
    local file="${1}"
    local ResultsFolder="${2}"
    local FIXFolder="${3}"
    local DIR

    if [[ -e ${ResultsFolder}/${file} && ! -L ${ResultsFolder}/${file} ]]; then
	log_Warn "Script now creates ${file} in ${FIXFolder}"
	log_Warn "NOT creating a symlink from ${ResultsFolder}, because ${file} already exists there"
	log_Warn "Be careful in any future use that you are using the version of ${file} corresponding to the intended high-pass filter!"
    else
	# Need to force the symlink (-f) in case one already exists
	# Make sure to create the symlink as a relative path!
	DIR=$(pwd)
	cd ${ResultsFolder}
	ln -sf $(basename "${FIXFolder}")/${file}
	cd ${DIR}
    fi
}

# ------------------------------------------------------------------------------
#  Main processing of script.
# ------------------------------------------------------------------------------

main()
{
	local this_script_dir=$(readlink -f "$(dirname "$0")")
	
	log_Msg "main functionality begin"
	
	# Retrieve positional parameters
	local StudyFolder="${1}"
	local Subject="${2}"
	local fMRIName="${3}"
	local HighPass="${4}"
	local TemplateSceneDualScreen="${5}"
	local TemplateSceneSingleScreen="${6}"
	local ReuseHighPass="${7}"

	local MatlabRunMode
	if [ -z "${8}" ]; then
	    MatlabRunMode=${G_DEFAULT_MATLAB_RUN_MODE}
	else
	    MatlabRunMode="${8}"
	fi
	
	# Log values retrieved from positional parameters
	log_Msg "StudyFolder: ${StudyFolder}"
	log_Msg "Subject: ${Subject}"
	log_Msg "fMRIName: ${fMRIName}"
	log_Msg "HighPass: ${HighPass}"
	log_Msg "TemplateSceneDualScreen: ${TemplateSceneDualScreen}"
	log_Msg "TemplateSceneSingleScreen: ${TemplateSceneSingleScreen}"
	log_Msg "ReuseHighPass: ${ReuseHighPass}"
	log_Msg "MatlabRunMode: ${MatlabRunMode}"

	# NOTE: HighPass flag may be "pd*", if polynomial detrending was requested in 
	# hcp_fix_multi_run (not supported in hcp_fix currently)

    # Polynomial detrending is not supported in prepareICAs.m currently
	# Must use an already existing hp'ed time-series in that case
	if [[ "${HighPass}" == pd* && "${ReuseHighPass}" != "YES" ]]; then
		log_Err_Abort "If using polynomial detrending, must use an already existing high-passed time-series (i.e., --reuse-high-pass must be set to YES)"
	fi

	if [[ "${HighPass}" == pd* ]]; then
		hpNum=${HighPass:2}
	else
		hpNum=${HighPass}
	fi

	# Confirm that $hpNum is a valid numeric
	if ! [[ "${hpNum}" =~ ^[-]?[0-9]+$ ]]; then
		log_Err_Abort "Invalid value for --high-pass (${HighPass})"
	fi

	# If HighPass < 0, then no high-pass was applied and directories/filenames
    # will not include an "_hp" string
	if (( hpNum < 0 )); then
		hpStr=""
	else
		hpStr="_hp${HighPass}"
	fi

	# Naming Conventions and other variables
	local AtlasFolder="${StudyFolder}/${Subject}/MNINonLinear"
	log_Msg "AtlasFolder: ${AtlasFolder}"

	local ResultsFolder="${AtlasFolder}/Results/${fMRIName}"
	log_Msg "ResultsFolder: ${ResultsFolder}"

	local ICAFolder="${ResultsFolder}/${fMRIName}${hpStr}.ica/filtered_func_data.ica"
	log_Msg "ICAFolder: ${ICAFolder}"

	local FIXFolder="${ResultsFolder}/${fMRIName}${hpStr}.ica"
	log_Msg "FIXFolder: ${FIXFolder}"

	log_Msg "Creating ${ICAFolder}/ICAVolumeSpace.txt file"
	echo "OTHER" > "${ICAFolder}/ICAVolumeSpace.txt"
	echo "1 255 255 255 255" >> "${ICAFolder}/ICAVolumeSpace.txt"

	log_Msg "Creating ${ICAFolder}/mask.nii.gz"
	${FSLDIR}/bin/fslmaths ${ICAFolder}/melodic_oIC.nii.gz -Tstd -bin ${ICAFolder}/mask.nii.gz

	${CARET7DIR}/wb_command -volume-label-import ${ICAFolder}/mask.nii.gz ${ICAFolder}/ICAVolumeSpace.txt ${ICAFolder}/mask.nii.gz

	log_Msg "Creating dense timeseries from melodic volume maps"
	${CARET7DIR}/wb_command -cifti-create-dense-timeseries ${ICAFolder}/melodic_oIC_vol.dtseries.nii -volume ${ICAFolder}/melodic_oIC.nii.gz ${ICAFolder}/mask.nii.gz -timestep 1 -timestart 1

	## Prep variables for prepareICAs
	log_Msg "Set up for prepareICAs MATLAB code"
	local HighPassUse
	if [ ${ReuseHighPass} = "YES" ] ; then
		dtseriesName="${ResultsFolder}/${fMRIName}_Atlas${hpStr}" #No Extension Here
		log_Msg "dtseriesName: ${dtseriesName}"
		HighPassUse="-1"
	else
		dtseriesName="${ResultsFolder}/${fMRIName}_Atlas" #No Extension Here
		log_Msg "dtseriesName: ${dtseriesName}"
		HighPassUse="${HighPass}"
	fi

	# Confirm that $HighPassUse is a valid numeric at this point
	if ! [[ "${HighPassUse}" =~ ^[-]?[0-9]+$ ]]; then
		log_Err_Abort "Invalid value for --high-pass (${HighPass})"
	fi
	
	local ICAs="${ICAFolder}/melodic_mix"  # Input to prepareICAs
	log_Msg "ICAs: ${ICAs}"

	local ICAdtseries="${ICAFolder}/melodic_oIC.dtseries.nii"  # Output of prepareICAs
	log_Msg "ICAdtseries: ${ICAdtseries}"

	local NoiseICAs="${FIXFolder}/.fix"  # Input to prepareICAs
	log_Msg "NoiseICAs: ${NoiseICAs}"

	local Noise="${FIXFolder}/Noise.txt"  # Output of prepareICAs
	log_Msg "Noise: ${Noise}"

	local Signal="${FIXFolder}/Signal.txt"  # Output of prepareICAs
	log_Msg "Signal: ${Signal}"

	local ComponentList="${FIXFolder}/ComponentList.txt"  # Output of prepareICAs
	log_Msg "ComponentList: ${ComponentList}"

	local TR=$(${FSLDIR}/bin/fslval ${ResultsFolder}/${fMRIName}${hpStr}_clean pixdim4)  # Input to prepareICAs
	log_Msg "TR: ${TR}"

	if [ -e ${ComponentList} ] ; then  # Output of prepareICAs
		log_Msg "Removing ComponentList: ${ComponentList}"
		rm ${ComponentList}
	fi

	# For interpreted modes, make sure that matlab/octave have access to the functions they need
	export FSL_MATLAB_PATH="${FSLDIR}/etc/matlab"
	local ML_PATHS="addpath('${FSL_MATLAB_PATH}'); addpath('${MATLAB_GIFTI_LIB}'); addpath('${this_script_dir}/scripts');"
	
	# run MATLAB prepareICAs function
	case ${MatlabRunMode} in

		0)
			# Use Compiled Matlab
			local matlab_exe="${HCPPIPEDIR}/ICAFIX/scripts/Compiled_prepareICAs/run_prepareICAs.sh"
			
			# Do NOT enclose string variables inside an additional single quote because all
			# variables are already passed into the compiled binary as strings
			local matlab_function_arguments=("${dtseriesName}" "${ICAs}" "${CARET7DIR}/wb_command")
			matlab_function_arguments+=("${ICAdtseries}" "${NoiseICAs}" "${Noise}")
			matlab_function_arguments+=("${Signal}" "${ComponentList}" "${HighPassUse}")
			matlab_function_arguments+=("${TR}")

			local matlab_cmd=("${matlab_exe}" "${MATLAB_COMPILER_RUNTIME}" "${matlab_function_arguments[@]}")

			# redirect tokens must be parsed by bash before doing variable expansion, and thus can't be inside a variable
			# MPH: Going to let Compiled MATLAB use the existing stdout and stderr, rather than creating a separate log file
			#local matlab_logfile="${FIXFolder}/.postfix.${fMRIName}.prepareICAs.matlab.log"
			#log_Msg "Run MATLAB command: ${matlab_cmd[*]} >> ${matlab_logfile} 2>&1"
			#"${matlab_cmd[@]}" >> "${matlab_logfile}" 2>&1
			log_Msg "Run compiled MATLAB: ${matlab_cmd[*]}"
			"${matlab_cmd[@]}"
			log_Msg "Compiled MATLAB return code $?"
			;;

		1 | 2)
			# Use interpreted MATLAB or Octave
			if [[ ${MatlabRunMode} == '1' ]]; then
			    local interpreter=(matlab -nojvm -nodisplay -nosplash)
			else
			    local interpreter=(octave -q --no-window-system)
			fi

			local matlab_cmd="${ML_PATHS} prepareICAs('${dtseriesName}','${ICAs}','${CARET7DIR}/wb_command','${ICAdtseries}','${NoiseICAs}','${Noise}','${Signal}','${ComponentList}',${HighPassUse},${TR});"
			
			log_Msg "Run interpreted MATLAB/Octave (${interpreter[@]}) with command..."
			log_Msg "${matlab_cmd}"

			# Use bash redirection ("here-string") to pass multiple commands into matlab
			# (Necessary to protect the semicolons that separate matlab commands, which would otherwise
			# get interpreted as separating different bash shell commands)
			"${interpreter[@]}" <<<"${matlab_cmd}"

			log_Msg "Interpreted MATLAB/Octave return code: $?"
			;;
		
		*)
			log_Err_Abort "Unrecognized MATLAB run mode value: ${MatlabRunMode}"
			;;
	esac

	# N.B. ${ComponentList} doesn't exist until after prepareICAs
	# If it doesn't exist at this point, we should abort
	if [ ! -e ${ComponentList} ] ; then
		log_Err_Abort "ComponentList (${ComponentList}) does not exist"
	fi

	log_Msg "Convert melodic volume maps to dscalar. Output ${ICAFolder}/melodic_oIC_vol.dscalar.nii"
	${CARET7DIR}/wb_command -cifti-convert-to-scalar ${ICAFolder}/melodic_oIC_vol.dtseries.nii ROW ${ICAFolder}/melodic_oIC_vol.dscalar.nii -name-file ${ComponentList}

	log_Msg "Convert melodic cifti maps to dscalar. Output ${ICAFolder}/melodic_oIC.dscalar.nii"
	${CARET7DIR}/wb_command -cifti-convert-to-scalar ${ICAFolder}/melodic_oIC.dtseries.nii ROW ${ICAFolder}/melodic_oIC.dscalar.nii -name-file ${ComponentList}
	
    # Remove the intermediate .dtseries versions of the melodic maps
	rm ${ICAFolder}/melodic_oIC_vol.dtseries.nii ${ICAFolder}/melodic_oIC.dtseries.nii

	log_Msg "Create scaler series of ICA timecourses"
	${CARET7DIR}/wb_command -cifti-create-scalar-series ${ICAs} ${ICAs}.sdseries.nii -transpose -name-file ${ComponentList} -series SECOND 0 ${TR}

	# TimC: step=1/length-of-time-course-in-seconds=1/NumTimePoints*TR
	local NumTimePoints=$(${FSLDIR}/bin/fslval ${ResultsFolder}/${fMRIName}${hpStr}_clean dim4)
	log_Msg "NumTimePoints: ${NumTimePoints}"
	local FTmixStep=$(echo "scale=7 ; 1/(${NumTimePoints}*${TR})" | bc -l)
	log_Msg "FTmixStep: ${FTmixStep}"
	${CARET7DIR}/wb_command -cifti-create-scalar-series ${ICAFolder}/melodic_FTmix ${ICAFolder}/melodic_FTmix.sdseries.nii -transpose -name-file ${ComponentList} -series HERTZ 0 ${FTmixStep}
	rm ${ComponentList}

	# 1/28/2019, MPH: Going to place the ReclassifyAs*.txt files into FIXFolder
	# to avoid name collision if user runs FIX with a different highpass filter.
	# But then symlink to them from ResultsFolder for compatibility with previous code and downstream scripts
	# The .scene files need to stay in ResultsFolder (so the paths to the files still work), but
	# we'll add the highpass filter to the file name.
	if [ ! -e ${FIXFolder}/ReclassifyAsSignal.txt ] ; then
		touch ${FIXFolder}/ReclassifyAsSignal.txt
	fi

	if [ ! -e ${FIXFolder}/ReclassifyAsNoise.txt ] ; then
		touch ${FIXFolder}/ReclassifyAsNoise.txt
	fi

	log_Msg "Making dual screen scene"
	local sceneFileDual=${ResultsFolder}/${Subject}_${fMRIName}${hpStr}_ICA_Classification_dualscreen.scene
	# MPH: Overwrite file, if it already exists
	cat ${TemplateSceneDualScreen} | sed s/SubjectID/${Subject}/g | sed s/fMRIName/${fMRIName}/g | sed s@StudyFolder@"../../../.."@g | sed s@_hpHighPass@${hpStr}@g >| ${sceneFileDual}

	log_Msg "Making single screen scene"
	local sceneFileSingle=${ResultsFolder}/${Subject}_${fMRIName}${hpStr}_ICA_Classification_singlescreen.scene
	# MPH: Overwrite file, if it already exists
	cat ${TemplateSceneSingleScreen} | sed s/SubjectID/${Subject}/g | sed s/fMRIName/${fMRIName}/g | sed s@StudyFolder@"../../../.."@g | sed s@_hpHighPass@${hpStr}@g >| ${sceneFileSingle}

	# For legacy compatibility, we symlink the ReclassifyAs*.txt files into ResultsFolder.
	# If ReclassifyAs*.txt files already exist in ResultsFolder, then those
	# need to be preserved (but with a warning generated)!
	# If file exists as a symlink, force creation of a new symlink pointing to the FIXFolder files
	local file=ReclassifyAsSignal.txt
	create_symlink_if_appropriate "${file}" "${ResultsFolder}" "${FIXFolder}"
	local file=ReclassifyAsNoise.txt
	create_symlink_if_appropriate "${file}" "${ResultsFolder}" "${FIXFolder}"

	log_Msg "Completed!"
}

# ------------------------------------------------------------------------------
#  "Global" processing - everything above here should be in a function
# ------------------------------------------------------------------------------

# Establish defaults
G_DEFAULT_MATLAB_RUN_MODE=1		# Use interpreted MATLAB

# Set global variables
g_script_name=$(basename "${0}")

# Allow script to return a Usage statement, before any other output
if [ "$#" = "0" ]; then
    show_usage
    exit 1
fi

# Verify HCPPIPEDIR environment variable is set
if [ -z "${HCPPIPEDIR}" ]; then
	echo "${g_script_name}: ABORTING: HCPPIPEDIR environment variable must be set"
	exit 1
fi

# Load function libraries
source "${HCPPIPEDIR}/global/scripts/debug.shlib" "$@"         # Debugging functions; also sources log.shlib
source ${HCPPIPEDIR}/global/scripts/opts.shlib                 # Command line option functions
source "${HCPPIPEDIR}/global/scripts/fsl_version.shlib"        # Functions for getting FSL version

opts_ShowVersionIfRequested $@

if opts_CheckForHelpRequest $@; then
	show_usage
	exit 0
fi

${HCPPIPEDIR}/show_version

# Verify required environment variables are set and log value
log_Check_Env_Var HCPPIPEDIR
log_Check_Env_Var CARET7DIR
log_Check_Env_Var FSLDIR

# Show tool versions
show_tool_versions

# Determine whether named or positional parameters are used and invoke the 'main' function
if [[ ${1} == --* ]]; then
	# Named parameters (e.g. --parameter-name=parameter-value) are used
	log_Msg "Using named parameters"

	# Get command line options
	get_options "$@"

	# Invoke main functionality using positional parameters
	#     ${1}               ${2}           ${3}            ${4}            ${5}                           ${6}                             ${7}                 ${8}
	main "${p_StudyFolder}" "${p_Subject}" "${p_fMRIName}" "${p_HighPass}" "${p_TemplateSceneDualScreen}" "${p_TemplateSceneSingleScreen}" "${p_ReuseHighPass}"	"${p_MatlabRunMode}"

else
	# Positional parameters are used
	log_Msg "Using positional parameters"
	main $@

fi

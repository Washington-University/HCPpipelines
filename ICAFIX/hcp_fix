#!/bin/bash

#   hcp_fix - wrapper script for FIX, for HCP pipelines
#
#   Original by Stephen Smith, FMRIB Analysis Group
#
#   Copyright (C) 2012-2013 University of Oxford
#
#   SHCOPYRIGHT
#
#   Changes relative to the version of hcp_fix supplied by the FIX distribution:
#    (Tim Coalson, Tim Brown, Keith Jamison, Michael Harms)
#
#   1) Add a flag to to control whether motion regression is applied
#      (and appropriate conditional code based on that choice)
#   2) Defaults to using whatever version of 'melodic' is primary in $PATH,
#      rather than the $FSLDIR/bin version.
#   3) Remove the restriction on melodic to an upper-limit of 250 dimensions (no more "-d -250")
#   4) Add flexibility for user to specify their own training date file
#   5) Replaces the brainmask used as part of deriving the 'veins' image from one
#      derived from $FSL_FIXDIR/mask_files/hcp_0.7mm_brain_mask to the subject's
#      specific T1w/brainmask_fs.nii.gz
#   6) Includes more verbose output 

# Set this before calling hcp_fix instead, to make it more flexible
#FSL_FIXDIR=$( cd $(dirname $0) ; pwd)
#export FSL_FIXDIR

# All fix settings are held in the settings.sh file - edit this file to suit your setup
. ${FSL_FIXDIR}/settings.sh

#############################################################

DEBUG="TRUE"

Debug() {
	msg="$*"
	if [ "${DEBUG}" = "TRUE" ]; then
		echo "hcp_fix: DEBUG: ${msg}"
	fi
}

Inform() {
	msg="$*"
	echo "hcp_fix: INFORM: ${msg}"
}

Error() {
	msg="$*"
	echo "hcp_fix: ERROR: ${msg}"
}

Usage() {
    cat <<EOF

hcp_fix <4D_FMRI_data> <highpass> <do_motion_regression> [<TrainingFile>]
  <highpass> is the temporal highpass full-width (2*sigma) to use, in seconds
  <do_motion_regression> must be specified, use TRUE or FALSE

e.g.   hcp_fix BOLD_REST1_RL/BOLD_REST1_RL.nii.gz 200 TRUE

for detrending-like behaviour, set <highpass> to 2000

EOF
    exit 1
}

if (( $# < 3 ))
then
    #Usage does an exit
    Usage
fi

fmri=$1
cd `dirname $fmri`
fmri=`basename $fmri`
fmri=`$FSLDIR/bin/imglob $fmri`
[ `imtest $fmri` != 1 ] && echo No valid 4D_FMRI input file specified && exit 1
fmri_orig=$fmri

hp=$2

#this case logic could go in a helper function, interpret_as_bool or something
case $(echo "$3" | tr '[:upper:]' '[:lower:]') in
    ( true | yes )
        doMotionRegression=TRUE
        ;;
    ( false | no | none )
        doMotionRegression=FALSE
        ;;
    ( * )
        Error "error: '$3' is not valid for <do_motion_regression>, please use TRUE or FALSE"
        exit 1
        ;;
esac

unset TrainingData
if [ $# -ge 4 ]; then
	TrainingData=$4
fi

tr=`$FSLDIR/bin/fslval $fmri pixdim4`

Inform "processing FMRI file $fmri with highpass $hp"

if (( hp > 0 )) ; then
  Inform "running highpass"
  #convert to sigma in volumes (not seconds)
  hptr=$(echo "scale = 10; $hp / (2 * $tr)" | bc -l)
  ${FSLDIR}/bin/fslmaths $fmri -bptf $hptr -1 ${fmri}_hp$hp
  fmri=${fmri}_hp$hp
fi

Inform "running MELODIC"
mkdir -p ${fmri}.ica
Debug "About to run melodic: Contents of ${fmri}.ica follow"
if [ "${DEBUG}" = "TRUE" ] ; then
	ls -lRa ${fmri}.ica
fi

#grab melodic from $PATH by default, don't hardcode it with respect to $FSLDIR
#we need to do "if which ..." because the script currently uses set -e
if which melodic &> /dev/null
then
    MELODIC=$(which melodic 2> /dev/null)
else
    #if it isn't even in $PATH, fall back on FSLDIR
    MELODIC="${FSLDIR}/bin/melodic"
fi
Debug "Beginning of melodic version log"
if [ "${DEBUG}" = "TRUE" ] ; then
	"${MELODIC}" --version
fi
Debug "End of melodic version log"

${MELODIC} -i $fmri -o ${fmri}.ica/filtered_func_data.ica --nobet --report --Oall --tr=$tr
retCode=$?
Debug "melodic has been run: retCode = ${retCode}"
Debug "melodic has been run: Contents of ${fmri}.ica follow"
if [ "${DEBUG}" = "TRUE" ] ; then
	ls -lRa ${fmri}.ica
fi

if [ "${retCode}" -ne "0" ] ; then
    Error "melodic has returned a non-zero code"
	Error "Exiting this script with -1 return value."
	exit -1
fi

cd ${fmri}.ica

$FSLDIR/bin/imln ../$fmri filtered_func_data
$FSLDIR/bin/imln filtered_func_data.ica/mask mask

if [ `$FSLDIR/bin/imtest ../${fmri_orig}_SBRef` = 1 ] ; then
  $FSLDIR/bin/imln ../${fmri_orig}_SBRef mean_func
else
  $FSLDIR/bin/imln filtered_func_data.ica/mean mean_func
fi

if [ -f ../${fmri_orig}_Atlas.dtseries.nii ] ; then
  $FSLDIR/bin/imln ../${fmri_orig}_Atlas.dtseries.nii Atlas.dtseries.nii
fi

mkdir -p mc
if [ -f ../Movement_Regressors.txt ] ; then
  cat ../Movement_Regressors.txt | awk '{ print $4 " " $5 " " $6 " " $1 " " $2 " " $3}' > mc/prefiltered_func_data_mcf.par
else
  Error "Movement_Regressors.txt not retrieved properly." 
  exit -1
fi 

Inform "functionmotionconfounds log file is to be named: .fix.functionmotionconfounds.log instead of .fix.log"
#${FSL_FIXDIR}/call_matlab.sh -l .fix.log -f functionmotionconfounds $tr $hp 
${FSL_FIXDIR}/call_matlab.sh -l .fix.functionmotionconfounds.log -f functionmotionconfounds $tr $hp 

mkdir -p reg
cd reg

i_am_at=`pwd`
Debug "current folder ${i_am_at}"

$FSLDIR/bin/imln ../../../../T1w_restore_brain highres
$FSLDIR/bin/imln ../../../../wmparc wmparc
$FSLDIR/bin/imln ../mean_func example_func
$FSLDIR/bin/makerot --theta=0 > highres2example_func.mat
if [ `$FSLDIR/bin/imtest ../../../../T2w` = 1 ] ; then
  $FSLDIR/bin/fslmaths ../../../../T1w -div ../../../../T2w veins -odt float
  $FSLDIR/bin/fslmaths veins -div `$FSLDIR/bin/fslstats veins -k ../../../../brainmask_fs.nii.gz -P 50` -mul 2.18 -thr 10 -min 50 -div 50 veins
  $FSLDIR/bin/flirt -in veins -ref example_func -applyxfm -init highres2example_func.mat -out veins_exf
  $FSLDIR/bin/fslmaths veins_exf -mas example_func veins_exf
fi
cd ../..

Inform "running FIX"

# Changes to handle user specified training data file
if [ "X${TrainingData}" != X ]; then  # User has specified a training data file
	
	# add .RData suffix if not already there
	if [[ "${TrainingData}" != *.RData ]]; then 
		TrainingData=${TrainingData}.RData
	fi

	# if the specified TrainingData is not a full path to an existing file,
	# assume that the user is specifying the name of a file in the training_files folder in FSL_FIXDIR
	if [ ! -f "${TrainingData}" ]; then 
		TrainingData=${FSL_FIXDIR}/training_files/${TrainingData}
	fi

	# finally, if the TrainingData file is not found, report an error and get out of here
	if [ ! -f "${TrainingData}" ]; then
		Error "FIX training data not found: ${TrainingData}"
		exit -1
	fi

	# now run fix
	if [[ ${doMotionRegression} == "TRUE" ]]
	then
	    #use array for whitespace safety, even if the rest of the script isn't
	    fix_cmd=("${FSL_FIXDIR}/fix" "${fmri}.ica" "${TrainingData}" 10 -m -h "${hp}")
	else
		#-h is actually a subargument to -m, and will cause problems if specified without (or even not directly following) -m
	    fix_cmd=("${FSL_FIXDIR}/fix" "${fmri}.ica" "${TrainingData}" 10)
	fi
	Inform "About to run: ${fix_cmd[*]}"
	"${fix_cmd[@]}"

else
	# user has not specified a training data file
	#TSC: so, let's look for it and give a useful error, rather than pretending they didn't want to do what they said
	#TSC: if you WANT to use, say, hp150 with hp2000 training, it should be explicitly requested by the user
	#TSC: exception: we will recommend hp 0 (linear) for performance, and hp 2000 is already trained, and largely indistinguishable
	training_hp="${hp}"
	if [[ ! -f "${FSL_FIXDIR}/training_files/HCP_hp${hp}.RData" ]]
	then
	    if (( hp == 0 ))
	    then
	        #hack: hp 2000 is close enough to a linear detrend only, but linear detrend is far faster
	        #we know the hp 2000 training data exists, so use it if we don't see a hp 0 set
	        training_hp=2000
	    else
    	    Error "no standard training data found for specified high pass (${hp}), please specify training data manually or use a standard high pass setting"
    	    exit 1
	    fi
	fi
	Inform "using training data ${FSL_FIXDIR}/training_files/HCP_hp${training_hp}.RData"
	if [[ ${doMotionRegression} == "TRUE" ]]
	then
	    fix_cmd=("${FSL_FIXDIR}/fix" "${fmri}.ica" "${FSL_FIXDIR}/training_files/HCP_hp${training_hp}.RData" 10 -m -h "${hp}")
    else
        #-h is actually a subargument to -m, and will cause problems if specified without (or even not directly following) -m
	    fix_cmd=("${FSL_FIXDIR}/fix" "${fmri}.ica" "${FSL_FIXDIR}/training_files/HCP_hp${training_hp}.RData" 10)
    fi
    Inform "About to run: ${fix_cmd[*]}"
    "${fix_cmd[@]}"
fi

$FSLDIR/bin/immv ${fmri}.ica/filtered_func_data_clean ${fmri}_clean
$FSLDIR/bin/immv ${fmri}.ica/filtered_func_data_clean_vn ${fmri}_clean_vnf

if [ -f ${fmri}.ica/Atlas_clean.dtseries.nii ] ; then
  /bin/mv ${fmri}.ica/Atlas_clean.dtseries.nii ${fmri_orig}_Atlas_hp${hp}_clean.dtseries.nii
  /bin/mv ${fmri}.ica/Atlas_clean_vn.dscalar.nii ${fmri_orig}_Atlas_hp${hp}_clean_vn.dscalar.nii
fi


#!/bin/bash

#   hcp_fix - wrapper script for FIX, for HCP pipelines
#
#   Original by Stephen Smith, FMRIB Analysis Group
#
#   Copyright (C) 2012-2013 University of Oxford
#
#   SHCOPYRIGHT
#
#   Changes relative to the version of hcp_fix supplied by the FIX distribution:
#    (Tim Coalson, Tim Brown, Keith Jamison, Michael Harms)
#
#   1) Add a flag to to control whether motion regression is applied
#      (and appropriate conditional code based on that choice)
#   2) Defaults to using whatever version of 'melodic' is primary in $PATH,
#      rather than the $FSLDIR/bin version.
#   3) Remove the restriction on melodic to an upper-limit of 250 dimensions (no more "-d -250")
#   4) Add flexibility for user to specify their own training date file
#   5) Replaces the brainmask used as part of deriving the 'veins' image from one
#      derived from $FSL_FIXDIR/mask_files/hcp_0.7mm_brain_mask to the subject's
#      specific T1w/brainmask_fs.nii.gz
#   6) Includes more verbose output 

#############################################################

show_usage() {
    cat <<EOF

hcp_fix <4D_FMRI_data> <highpass> <do_motion_regression> [<TrainingFile>] [<FixThreshold>] [<DeleteIntermediates>]

  Apply FIX cleaning to a single file

  <4D_FMRI_data>: fMRI run to be processed (nifti extension optional)

  <highpass>: 
     If > 0, is the temporal highpass full-width (2*sigma), in seconds, to apply using 'fslmaths -bptf'

     For detrending-like behaviour, set <highpass> to 2000

  <do_motion_regression>:
     Controls whether to regress motion parameters as part of the cleaning.
     Must be specified, use TRUE or FALSE

  [<TrainingFile>] (optional)
     Defaults to "HCP_hp<highpass>.RData"

  [<FixThreshold>] (optional)
     Threshold setting in FIX that controls the sensitivity/specificity tradeoff.
     Default = 10.
     To specify a threshold, <TrainingFile> becomes a mandatory argument.

e.g.  hcp_fix rfMRI_REST1_RL/rfMRI_REST1_RL.nii.gz 2000 FALSE
        (if launching the script from the '\${StudyFolder}/\${Subject}/MNINonLinear/Results' directory)

  [<DeleteIntermediates>] (optional)
     Delete highpass-filtered files at the end, use TRUE or FALSE.
     Default = FALSE.
     You must specify both <TrainingFile> and <FixThreshold> in order to specify this option.

EOF
}

if (( $# < 3 ))
then
    show_usage
	exit 1
fi

#############################################################

### Support Functions

# Function to return whether FIX version is "NEW" (i.e., 1.06.12 or later).
# Need at least that fix version for proper handling of the
# do_motion_regression=FALSE condition (when highpass>=0)

# NOTE:
#   Don't echo anything in this function other than the last echo
#   that outputs the return value
#
determine_old_or_new_fix()
{
	# Default to "OLD", and change to "NEW" only if version is 1.06.12 or later
	local old_or_new="OLD"
	
	fix_version_file="${FSL_FIXDIR}/fixversion"

	if [ -f "${fix_version_file}" ]; then
		
		fix_version=$(cat "${fix_version_file}")

		# parse the FIX version information into primary, secondary, and tertiary parts
		fix_version_array=(${fix_version//./ })
		
		fix_primary_version="${fix_version_array[0]}"
		fix_primary_version=${fix_primary_version//[!0-9]/}
	
		fix_secondary_version="${fix_version_array[1]}"
		fix_secondary_version=${fix_secondary_version//[!0-9]/}
	
		fix_tertiary_version="${fix_version_array[2]}"
		fix_tertiary_version=${fix_tertiary_version//[!0-9]/}

		# Important: Use single bracket for following tests, since double bracket results in interpretation
		# of a leading zero as an octal number.
		# [Alternatively, could force a base-10 interpretation using a "$(( 10#$ver ))" construction].
		if [ ${fix_primary_version} -ge 2 ] ; then
			old_or_new="NEW"
		elif [ ${fix_primary_version} -eq 1 ] ; then
			if [ ${fix_secondary_version} -ge 7 ] ; then
				old_or_new="NEW"
			elif [ ${fix_secondary_version} -eq 6 ] ; then
				if [ ${fix_tertiary_version} -ge 12 ] ; then
					old_or_new="NEW"
				fi
			fi
		fi

	fi

	echo ${old_or_new}
}

function interpret_as_bool()
{
    case $(echo "$1" | tr '[:upper:]' '[:lower:]') in
    (true | yes | 1)
        echo TRUE
        ;;
    (false | no | none | 0)
        echo FALSE
        ;;
    (*)
        log_Err_Abort "error: '$1' is not valid for this argument, please use TRUE or FALSE"
        ;;
    esac
}

#############################################################

# Set global variables
g_script_name=$(basename "${0}")

# Verify HCPPIPEDIR environment variable is set
if [ -z "${HCPPIPEDIR}" ]; then
	echo "${g_script_name}: ABORTING: HCPPIPEDIR environment variable must be set"
	exit 1
fi

#  Load function libraries
source "${HCPPIPEDIR}/global/scripts/debug.shlib" "$@" # Debugging functions; also sources log.shlib
source "${HCPPIPEDIR}/global/scripts/fsl_version.shlib" # Functions for getting FSL version

# Verify required environment variables are set and log value
log_Check_Env_Var HCPPIPEDIR
log_Check_Env_Var FSLDIR
log_Check_Env_Var FSL_FIXDIR

log_debugOn="" # Set to any non-empty string (e.g., "true") to turn on debugging related output
               # Set to empty string to disable debugging related output

# All fix settings are held in the settings.sh file - edit this file to suit your setup
# Default settings file that comes with fix isn't "ERR" clean, so disable temporarily
log_Msg "Sourcing ${FSL_FIXDIR}/settings.sh"
debug_disable_trap
. "${FSL_FIXDIR}/settings.sh"
debug_enable_trap

# Show HCP pipelines version
log_Msg "Showing HCP Pipelines version"
cat ${HCPPIPEDIR}/version.txt

# Show FSL version
log_Msg "Showing FSL version"
fsl_version_get fsl_ver
log_Msg "FSL version: ${fsl_ver}"

# Show specific FIX version, if available
if [ -f ${FSL_FIXDIR}/fixversion ]; then
	fixversion=$(cat ${FSL_FIXDIR}/fixversion )
	log_Msg "FIX version: $fixversion"
fi

# Log FSL_FIX_MATLAB_MODE (from the settings.sh file)
log_Msg "FSL_FIX_MATLAB_MODE: ${FSL_FIX_MATLAB_MODE}"

#############################################################

## ---------------------------------------------------------------------------
## Parse and check parameters
## ---------------------------------------------------------------------------

fmri=$1
cd `dirname $fmri`
fmri=`basename $fmri`  # After this, $fmri no longer includes the leading directory components
fmri=`$FSLDIR/bin/imglob $fmri`  # After this, $fmri will no longer have an extension (if there was one initially)
if [ `$FSLDIR/bin/imtest $fmri` != 1 ]; then
	log_Err_Abort "Invalid 4D_FMRI input file specified: ${fmri}"
fi

hp=$2

doMotionRegression=$(interpret_as_bool "$3")
# do_motion_regression=FALSE combined with hp filtering doesn't work properly with single-run FIX,
# for fix versions earlier than 1.06.12, so don't allow that mode of operation if the fix version
# isn't recent enough.
# https://github.com/Washington-University/HCPpipelines/issues/108
# Check and abort early if we can't implement the requested options with the fix version in use.
if [[ "$doMotionRegression" == "FALSE" ]]
then
	old_or_new_fix=$(determine_old_or_new_fix)
	if [ "${old_or_new_fix}" == "OLD" ] && (( hp >= 0 )) ; then
		log_Err_Abort "Due to a restriction in the FIX argument parsing, do_motion_regression=$3 is not supported for FIX versions prior to 1.06.12"
	fi
fi

unset TrainingData
unset FixThresh
if [ $# -ge 4 ] ; then
	TrainingData=$4
	FixThresh=$5
fi
DeleteIntermediates=FALSE
if (($# >= 6))
then
    DeleteIntermediates=$(interpret_as_bool "$6")
fi
if [ -z "${FixThresh}" ]; then
	FixThresh=10
fi

## ---------------------------------------------------------------------------
## Report parameters
## ---------------------------------------------------------------------------

log_Msg "fMRI Name: ${fmri}"
log_Msg "highpass: ${hp}"
log_Msg "doMotionRegression: ${doMotionRegression}"
log_Msg "TrainingData: ${TrainingData}"
log_Msg "FixThresh: ${FixThresh}"
log_Msg "DeleteIntermediates: ${DeleteIntermediates}"

## ---------------------------------------------------------------------------
## Preparation (highpass)
## ---------------------------------------------------------------------------

tr=`$FSLDIR/bin/fslval $fmri pixdim4`
log_Msg "tr: ${tr}"

fmrihp=${fmri}_hp${hp}
if (( hp > 0 )); then
  log_Msg "Running highpass"
  #convert to sigma in volumes (not seconds)
  hptr=$(echo "scale = 10; $hp / (2 * $tr)" | bc -l)

  # Starting with FSL 5.0.7, 'fslmaths -bptf' no longer includes the temporal mean in its output.
  # A work-around to this, which works with both the pre- and post-5.0.7 behavior is to compute
  # the temporal mean, remove it, run -bptf, and then add the mean back in.
  ${FSLDIR}/bin/fslmaths ${fmri} -Tmean ${fmrihp}
  highpass_cmd="${FSLDIR}/bin/fslmaths ${fmri} -sub ${fmrihp} -bptf ${hptr} -1 -add ${fmrihp} ${fmrihp}"
  log_Msg "highpass_cmd: ${highpass_cmd}"
  ${highpass_cmd}
elif (( hp == 0 )); then
  # Nothing in script currently detrends the volume if hp=0 is requested (which is the intended meaning of hp=0)
  log_Err_Abort "hp = ${hp} not currently supported"
else
  # Reset $fmrihp variable in this case to not include an "_hp${hp}" string in the outputs
  fmrihp=${fmri}
fi

mkdir -p ${fmrihp}.ica
log_Debug_Msg "About to run melodic: Contents of ${fmrihp}.ica follow"
if [ ! -z "${log_debugOn}" ] ; then
	ls -lRa ${fmrihp}.ica
fi

#grab melodic from $PATH by default, don't hardcode it with respect to $FSLDIR
#we need to do "if which ..." because the script currently uses ERR trap
if which melodic &> /dev/null
then
    MELODIC=$(which melodic 2> /dev/null)
else
    #if it isn't even in $PATH, fall back on FSLDIR
    MELODIC="${FSLDIR}/bin/melodic"
fi

log_Msg "Running MELODIC located at: $MELODIC"
log_Debug_Msg "Beginning of melodic version log, help, and checksum"
if [ ! -z "${log_debugOn}" ] ; then
	log_Debug_Msg "$MELODIC --version"
	$MELODIC --version
	log_Debug_Msg "$MELODIC --help"
	$MELODIC --help
	log_Debug_Msg "md5sum $MELODIC"
	md5sum $MELODIC
fi
log_Debug_Msg "End of melodic version log, help, and checksum"

## ---------------------------------------------------------------------------
## Run melodic
## ---------------------------------------------------------------------------

melodic_cmd="${MELODIC} -i ${fmrihp} -o ${fmrihp}.ica/filtered_func_data.ica --nobet --report --Oall --tr=${tr}"
if [ ! -z "${log_debugOn}" ] ; then
	melodic_cmd="${melodic_cmd} --verbose --debug"
fi

log_Msg "melodic_cmd: ${melodic_cmd}"
${melodic_cmd}
return_code=$?
log_Msg "melodic has been run: return_code = ${return_code}"
log_Debug_Msg "melodic has been run: Contents of ${fmrihp}.ica follow"
if [ ! -z "${log_debugOn}" ] ; then
	ls -lRa ${fmrihp}.ica
fi

if [ "${return_code}" -ne "0" ] ; then
    log_Err_Abort "melodic has returned a non-zero code"
fi

# Delete some time series, resulting from the '--Oall' option in melodic, that aren't needed
# (these may only get created in the context of MIGP)
$FSLDIR/bin/imrm ${fmrihp}.ica/filtered_func_data.ica/alldat
$FSLDIR/bin/imrm ${fmrihp}.ica/filtered_func_data.ica/concat_data

## ---------------------------------------------------------------------------
## Housekeeping related to files expected for FIX
## ---------------------------------------------------------------------------

cd ${fmrihp}.ica

# Note: fix_3_clean does NOT filter the volume (NIFTI) data -- it assumes
# that any desired filtering has already been done outside of fix.
# So here, we need to symlink to the hp-filtered volume data.
$FSLDIR/bin/imln ../$fmrihp filtered_func_data

# However, hp-filtering of the CIFTI (dtseries) occurs within fix_3_clean.
# So here, we just create a symlink with the file name expected by
# fix_3_clean ("Atlas.dtseries.nii") to the non-filtered data.
if [ -f ../${fmri}_Atlas.dtseries.nii ] ; then
  $FSLDIR/bin/imln ../${fmri}_Atlas.dtseries.nii Atlas.dtseries.nii
fi

# Other necessary files
$FSLDIR/bin/imln filtered_func_data.ica/mask mask
if [ `$FSLDIR/bin/imtest ../${fmri}_SBRef` = 1 ] ; then
  $FSLDIR/bin/imln ../${fmri}_SBRef mean_func
else
  $FSLDIR/bin/imln filtered_func_data.ica/mean mean_func
fi

# Get Movement_Regressors.txt into the format expected by functionmotionconfounds.m
mkdir -p mc
if [ -f ../Movement_Regressors.txt ] ; then
  	log_Msg "Creating mc/prefiltered_func_data_mcf.par file"
	cat ../Movement_Regressors.txt | awk '{ print $4 " " $5 " " $6 " " $1 " " $2 " " $3}' > mc/prefiltered_func_data_mcf.par
else
  log_Err_Abort "Movement_Regressors.txt not retrieved properly." 
fi 

mkdir -p reg
cd reg

i_am_at=`pwd`
log_Debug_Msg "current folder ${i_am_at}"

$FSLDIR/bin/imln ../../../../T1w_restore_brain highres
$FSLDIR/bin/imln ../../../../wmparc wmparc
$FSLDIR/bin/imln ../mean_func example_func
$FSLDIR/bin/makerot --theta=0 > highres2example_func.mat
if [ `$FSLDIR/bin/imtest ../../../../T2w` = 1 ] ; then
  $FSLDIR/bin/fslmaths ../../../../T1w -div ../../../../T2w veins -odt float
  $FSLDIR/bin/fslmaths veins -div `$FSLDIR/bin/fslstats veins -k ../../../../brainmask_fs -P 50` -mul 2.18 -thr 10 -min 50 -div 50 veins
  $FSLDIR/bin/flirt -in veins -ref example_func -applyxfm -init highres2example_func.mat -out veins_exf
  $FSLDIR/bin/fslmaths veins_exf -mas example_func veins_exf
fi
cd ../..

## ---------------------------------------------------------------------------
## Actually run FIX
## ---------------------------------------------------------------------------

log_Msg "Running FIX"

# Changes to handle user specified training data file
if [ "X${TrainingData}" != X ]; then  
        # User has specified a training data file
	
	# add .RData suffix if not already there
	if [[ "${TrainingData}" != *.RData ]]; then 
		TrainingData=${TrainingData}.RData
	fi

	# if the specified TrainingData is not a full path to an existing file,
	# assume that the user is specifying the name of a file in the training_files folder in FSL_FIXDIR
	if [ ! -f "${TrainingData}" ]; then 
		TrainingData=${FSL_FIXDIR}/training_files/${TrainingData}
	fi

	# finally, if the TrainingData file is not found, report an error and get out of here
	if [ ! -f "${TrainingData}" ]; then
		log_Err_Abort "FIX training data not found: ${TrainingData}"
	fi

else
	# User has not specified a training data file
	#TSC: so, let's look for it and give a useful error, rather than pretending they didn't want to do what they said
	#TSC: if you WANT to use, say, hp150 with hp2000 training, it should be explicitly requested by the user
	log_Msg "training data file not specified"
	if [[ ! -f "${FSL_FIXDIR}/training_files/HCP_hp${hp}.RData" ]]; then
		#currently, hp 0 doesn't do detrend in hcp_fix, so we can't use the same logic as in hcp_fix_multi_run
		log_Err_Abort "no standard training data found for specified high pass (${hp}), please specify training data manually or use a standard high pass setting"
	fi
	TrainingData=${FSL_FIXDIR}/training_files/HCP_hp${hp}.RData
fi
log_Msg "using training data file: ${TrainingData}"

# set up fix command
# use array for whitespace safety, even if the rest of the script isn't
if [[ ${doMotionRegression} == "TRUE" ]]; then
    fix_cmd=("${FSL_FIXDIR}/fix" "${fmrihp}.ica" "${TrainingData}" "${FixThresh}" -m -h "${hp}")
else
	old_or_new_fix=$(determine_old_or_new_fix)
	if [[ "${old_or_new_fix}" == "NEW" ]]; then
		# In the "NEW" (1.06.12 or later) version of FIX, -h is no longer a subargument to -m, and can occur by itself
		fix_cmd=("${FSL_FIXDIR}/fix" "${fmrihp}.ica" "${TrainingData}" "${FixThresh}" -h "${hp}")

	elif (( hp < 0 )); then
		# Ok to proceed regardless of FIX version, since not filtering, so we don't need the filtering of the CIFTI
		# that occurs in fix_3_clean. Simply don't supply either the -m or -h flags.
		fix_cmd=("${FSL_FIXDIR}/fix" "${fmrihp}.ica" "${TrainingData}" "${FixThresh}")

	else  # "OLD" and (hp >= 0)
		# Already aborted in this case earlier, but include again here for completeness
		log_Err_Abort "Due to a restriction in the FIX argument parsing, do_motion_regression=$3 is not supported for FIX versions prior to 1.06.12"
	fi
fi
log_Msg "fix_cmd: ${fix_cmd[*]}"
## MPH: The 'fix' script itself will continue to log to its own custom files
## Alert user to where those are
log_Msg "Check ${fmrihp}.ica/fix/logMatlab.txt for log output from feature extraction"
log_Msg "Check ${fmrihp}.ica/.fix_2b_predict.log for log output from component classification"
log_Msg "Check ${fmrihp}.ica/.fix.log for log output from cleanup stage"
"${fix_cmd[@]}"
return_code=$?
if [ "${return_code}" -ne "0" ]; then
    log_Err_Abort "return_code from fix_cmd: ${return_code}"
fi
log_Msg "Done running FIX"

## ---------------------------------------------------------------------------
## Rename some files (relative to the default names coded in fix_3_clean)
## ---------------------------------------------------------------------------

if (( hp >= 0 )); then
	hpStr="_hp${hp}"
else
	hpStr=""
fi

$FSLDIR/bin/immv ${fmrihp}.ica/filtered_func_data_clean ${fmrihp}_clean
if [ "$?" -ne "0" ]; then
    log_Err_Abort "Something went wrong; ${fmrihp}.ica/filtered_func_data_clean wasn't created"
fi
if [ -f ${fmrihp}.ica/Atlas_clean.dtseries.nii ]; then
    /bin/mv ${fmrihp}.ica/Atlas_clean.dtseries.nii ${fmri}_Atlas${hpStr}_clean.dtseries.nii
else
    log_Err_Abort "Something went wrong;  ${fmrihp}.ica/Atlas_clean.dtseries.nii wasn't created"
fi

# The variance normalization ("_vn") outputs of fix (fix_3_clean) require use of fix1.067 or later
# So check whether those files exist before moving/renaming them
if [ `$FSLDIR/bin/imtest ${fmrihp}.ica/filtered_func_data_clean_vn` = 1 ] ; then
    $FSLDIR/bin/immv ${fmrihp}.ica/filtered_func_data_clean_vn ${fmrihp}_clean_vn
fi
if [ -f ${fmrihp}.ica/Atlas_clean_vn.dscalar.nii ]; then
    /bin/mv ${fmrihp}.ica/Atlas_clean_vn.dscalar.nii ${fmri}_Atlas${hpStr}_clean_vn.dscalar.nii
fi
log_Msg "Done renaming files"

# Remove the 'fake-NIFTI' file created in fix_3_clean for high-pass filtering of the CIFTI (if it exists)
$FSLDIR/bin/imrm ${fmrihp}.ica/Atlas

# Always delete things with too-generic names
$FSLDIR/bin/imrm ${fmrihp}.ica/filtered_func_data
rm -f ${fmrihp}.ica/Atlas.dtseries.nii

# Optional deletion of highpass intermediates
if [ "${DeleteIntermediates}" == "TRUE" ] ; then
	if (( hp > 0 )); then  # fix_3_clean only writes out the hp-filtered time series if hp > 0
		$FSLDIR/bin/imrm ${fmri}_hp${hp}  # Explicitly use _hp${hp} here (rather than $hpStr as a safeguard against accidental deletion of the non-hp-filtered timeseries)
       rm -f ${fmrihp}.ica/Atlas_hp_preclean.dtseries.nii
    fi
else
    #even if we don't delete it, don't leave this file with a hard to interpret name
    if (( hp > 0 )); then
		# 'OR' mv command with "true" to avoid returning an error code if file doesn't exist for some reason
		mv -f ${fmrihp}.ica/Atlas_hp_preclean.dtseries.nii ${fmri}_Atlas_hp${hp}.dtseries.nii || true
    fi
fi

log_Msg "Completed!"
